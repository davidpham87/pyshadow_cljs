{"version":3,"sources":["pycljs/core.cljs"],"sourcesContent":["(ns pycljs.core\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n\n(defn json-parse-js [string]\n  ((.-parse js/JSON) string))\n\n(defn json-parse [string]\n  (-> string (json-parse-js) (js->clj)))\n\n(enable-console-print!)\n\n(println \"This text is printed from src/pycljs/core.cljs. Go ahead and edit it and see reloading?\")\n\n;; define your app data so that it doesn't get over-written on reload\n\n(defonce app-state (atom {:text \"Hello world! New\"}))\n\n(defn add-load-func [f]\n  (let [old-onload (.-onload js/window)]\n    (set! (.-onload js/window)\n          (if (nil? old-onload)\n            f\n            (fn [_] (old-onload) (f))))))\n\n\n(defn make-request [method url async handler]\n  (let [req         (js/XMLHttpRequest.)\n        req-ok      (fn [] (= (.-status req) 200))\n        data-ready  (fn [] (= (.-readyState req) 4))\n        req-done    (fn [] (and (req-ok) (data-ready)))\n        parse-resp  (fn [] (-> req (.-responseText) (json-parse)))\n        handle-resp (fn [_]\n                      (when (req-done)\n                        (let [response (parse-resp)]\n                          (handler response))))]\n    (set! (.-onreadystatechange req) handle-resp)\n    (.open req method url async)\n    (.send req)))\n\n\n(defn on-js-reload []\n  ;; optionally touch your app-state to force rerendering depending on\n  ;; your application\n  ;; (swap! app-state update-in [:__figwheel_counter] inc)\n  (.log js/console \"Call\")\n  (add-load-func\n   (fn []\n     (make-request\n      \"GET\"\n      \"/newtext\"\n      true\n      (fn [response]\n        ;; notes:\n        ;;  (assoc-in obj keyseq value) associates value with a\n        ;;                              series of keys in a nested map\n        ;;  (swap! atom assoc-in keyseq value)  does the same operation\n        ;;                                      on a map inside an atom\n        (.log js/console (response \"text\"))\n        (swap! app-state assoc-in [:text] (response \"text\"))))))\n)\n\n(defn test-request\n  ([] (test-request \"/newtext\" app-state :text))\n  ([resource-path data-container field]\n   (.log js/console resource-path)\n   (.log js/console (str \"test \" resource-path))\n   (.log js/console (:text @app-state))\n   (make-request\n    \"GET\"\n    resource-path\n    true\n    (fn [response]\n      ;; notes:\n      ;;  (assoc-in obj keyseq value) associates value with a\n      ;;                              series of keys in a nested map\n      ;;  (swap! atom assoc-in keyseq value)  does the same operation\n      ;;                                      on a map inside an atom\n      (swap! data-container assoc-in [field] (response \"text\"))))))\n\n(defn text-world []\n  [:p \"Reload, test, old-version\"])\n\n(defn show-json [ts-id]\n  (let [server-request (atom {:data {}})]\n    (fn [ts-id]\n      [:div\n       [:button {:on-click #(test-request (str \"ts/\" ts-id) server-request :data)} \"New Data\"]\n       (:data @server-request)])))\n\n\n(defn hello-world []\n  [:div\n   [:h1 \"Flask with clojurescript and figwheel demo\"]\n   [:p \"The heading below should change to say hi from flask\"]\n   [text-world]\n   [:h2 (:text @app-state)]\n   [:button {:on-click #(test-request)} \"Reload Text\"]\n   [show-json \"roche\"]])\n\n(defn ^:export init []\n  (on-js-reload)\n  (reagent/render-component [hello-world] (. js/document (getElementById \"app\"))))\n"],"mappings":"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","names":["pycljs.core/json-parse-js","fexpr__11357","js/JSON","string","pycljs.core/json-parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core/enable-console-print!","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","js/pycljs","js/pycljs.core","js/pycljs.core.app-state","pycljs.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","pycljs.core/add-load-func","js/window","old-onload","f","pycljs.core/make-request","js/XMLHttpRequest","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","req","and__4036__auto__","req-ok","data-ready","req-done","parse-resp","handler","response","handle-resp","method","url","async","pycljs.core/on-js-reload","js/console","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__11359","pycljs.core/test-request","js/Error","pycljs.core.test_request.cljs$core$IFn$_invoke$arity$3","resource-path","cljs.core/deref","data-container","field","pycljs.core/text-world","pycljs.core/show-json","ts-id","server-request","pycljs.core/hello-world","pycljs.core.test_request.cljs$core$IFn$_invoke$arity$0","pycljs.core/init","G__11360","G__11361","reagent.core/render-component","js/document"]}