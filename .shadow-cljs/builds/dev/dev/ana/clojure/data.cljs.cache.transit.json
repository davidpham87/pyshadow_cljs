["^ ","~:output",["^ ","~:js","goog.provide('clojure.data');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Internal helper for diff.\n */\nclojure.data.atom_diff = (function clojure$data$atom_diff(a,b){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a,b)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,a], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,null], null);\n}\n});\n/**\n * Convert an associative-by-numeric-index collection into\n * an equivalent vector, with nil for any missing keys\n */\nclojure.data.vectorize = (function clojure$data$vectorize(m){\nif(cljs.core.seq(m)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__16363){\nvar vec__16364 = p__16363;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16364,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16364,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,k,v);\n}),cljs.core.vec(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.keys(m)),null)),m);\n} else {\nreturn null;\n}\n});\n/**\n * Diff associative things a and b, comparing only the key k.\n */\nclojure.data.diff_associative_key = (function clojure$data$diff_associative_key(a,b,k){\nvar va = cljs.core.get.cljs$core$IFn$_invoke$arity$2(a,k);\nvar vb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(b,k);\nvar vec__16370 = clojure.data.diff(va,vb);\nvar a_STAR_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16370,(0),null);\nvar b_STAR_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16370,(1),null);\nvar ab = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16370,(2),null);\nvar in_a = cljs.core.contains_QMARK_(a,k);\nvar in_b = cljs.core.contains_QMARK_(b,k);\nvar same = ((in_a) && (in_b) && ((((!((ab == null)))) || ((((va == null)) && ((vb == null)))))));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((in_a) && ((((!((a_STAR_ == null)))) || ((!(same)))))))?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,a_STAR_]):null),((((in_b) && ((((!((b_STAR_ == null)))) || ((!(same)))))))?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,b_STAR_]):null),((same)?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,ab]):null)], null);\n});\n/**\n * Diff associative things a and b, comparing only keys in ks (if supplied).\n */\nclojure.data.diff_associative = (function clojure$data$diff_associative(var_args){\nvar G__16395 = arguments.length;\nswitch (G__16395) {\ncase 2:\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2 = (function (a,b){\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3(a,b,clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(a),cljs.core.keys(b)));\n});\n\nclojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3 = (function (a,b,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (diff1,diff2){\nreturn cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,diff1,diff2));\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(clojure.data.diff_associative_key,a,b),ks));\n});\n\nclojure.data.diff_associative.cljs$lang$maxFixedArity = 3;\n\nclojure.data.diff_sequential = (function clojure$data$diff_sequential(a,b){\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.data.vectorize,clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3(((cljs.core.vector_QMARK_(a))?a:cljs.core.vec(a)),((cljs.core.vector_QMARK_(b))?b:cljs.core.vec(b)),cljs.core.range.cljs$core$IFn$_invoke$arity$1((function (){var x__4135__auto__ = cljs.core.count(a);\nvar y__4136__auto__ = cljs.core.count(b);\nreturn ((x__4135__auto__ > y__4136__auto__) ? x__4135__auto__ : y__4136__auto__);\n})()))));\n});\nclojure.data.diff_set = (function clojure$data$diff_set(a,b){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_empty(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(a,b)),cljs.core.not_empty(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(b,a)),cljs.core.not_empty(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(a,b))], null);\n});\n\n/**\n * Implementation detail. Subject to change.\n * @interface\n */\nclojure.data.EqualityPartition = function(){};\n\n/**\n * Implementation detail. Subject to change.\n */\nclojure.data.equality_partition = (function clojure$data$equality_partition(x){\nif((((!((x == null)))) && ((!((x.clojure$data$EqualityPartition$equality_partition$arity$1 == null)))))){\nreturn x.clojure$data$EqualityPartition$equality_partition$arity$1(x);\n} else {\nvar x__4347__auto__ = (((x == null))?null:x);\nvar m__4348__auto__ = (clojure.data.equality_partition[goog.typeOf(x__4347__auto__)]);\nif((!((m__4348__auto__ == null)))){\nreturn (m__4348__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4348__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4348__auto__.call(null,x));\n} else {\nvar m__4348__auto____$1 = (clojure.data.equality_partition[\"_\"]);\nif((!((m__4348__auto____$1 == null)))){\nreturn (m__4348__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4348__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__4348__auto____$1.call(null,x));\n} else {\nthrow cljs.core.missing_protocol(\"EqualityPartition.equality-partition\",x);\n}\n}\n}\n});\n\n\n/**\n * Implementation detail. Subject to change.\n * @interface\n */\nclojure.data.Diff = function(){};\n\n/**\n * Implementation detail. Subject to change.\n */\nclojure.data.diff_similar = (function clojure$data$diff_similar(a,b){\nif((((!((a == null)))) && ((!((a.clojure$data$Diff$diff_similar$arity$2 == null)))))){\nreturn a.clojure$data$Diff$diff_similar$arity$2(a,b);\n} else {\nvar x__4347__auto__ = (((a == null))?null:a);\nvar m__4348__auto__ = (clojure.data.diff_similar[goog.typeOf(x__4347__auto__)]);\nif((!((m__4348__auto__ == null)))){\nreturn (m__4348__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4348__auto__.cljs$core$IFn$_invoke$arity$2(a,b) : m__4348__auto__.call(null,a,b));\n} else {\nvar m__4348__auto____$1 = (clojure.data.diff_similar[\"_\"]);\nif((!((m__4348__auto____$1 == null)))){\nreturn (m__4348__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4348__auto____$1.cljs$core$IFn$_invoke$arity$2(a,b) : m__4348__auto____$1.call(null,a,b));\n} else {\nthrow cljs.core.missing_protocol(\"Diff.diff-similar\",a);\n}\n}\n}\n});\n\ngoog.object.set(clojure.data.EqualityPartition,\"null\",true);\n\nvar G__16437_16615 = clojure.data.equality_partition;\nvar G__16438_16616 = \"null\";\nvar G__16439_16617 = ((function (G__16437_16615,G__16438_16616){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n});})(G__16437_16615,G__16438_16616))\n;\ngoog.object.set(G__16437_16615,G__16438_16616,G__16439_16617);\n\ngoog.object.set(clojure.data.EqualityPartition,\"string\",true);\n\nvar G__16440_16623 = clojure.data.equality_partition;\nvar G__16441_16624 = \"string\";\nvar G__16442_16625 = ((function (G__16440_16623,G__16441_16624){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n});})(G__16440_16623,G__16441_16624))\n;\ngoog.object.set(G__16440_16623,G__16441_16624,G__16442_16625);\n\ngoog.object.set(clojure.data.EqualityPartition,\"number\",true);\n\nvar G__16444_16626 = clojure.data.equality_partition;\nvar G__16445_16627 = \"number\";\nvar G__16446_16628 = ((function (G__16444_16626,G__16445_16627){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n});})(G__16444_16626,G__16445_16627))\n;\ngoog.object.set(G__16444_16626,G__16445_16627,G__16446_16628);\n\ngoog.object.set(clojure.data.EqualityPartition,\"array\",true);\n\nvar G__16449_16630 = clojure.data.equality_partition;\nvar G__16450_16631 = \"array\";\nvar G__16451_16632 = ((function (G__16449_16630,G__16450_16631){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960);\n});})(G__16449_16630,G__16450_16631))\n;\ngoog.object.set(G__16449_16630,G__16450_16631,G__16451_16632);\n\ngoog.object.set(clojure.data.EqualityPartition,\"function\",true);\n\nvar G__16453_16635 = clojure.data.equality_partition;\nvar G__16454_16636 = \"function\";\nvar G__16455_16637 = ((function (G__16453_16635,G__16454_16636){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n});})(G__16453_16635,G__16454_16636))\n;\ngoog.object.set(G__16453_16635,G__16454_16636,G__16455_16637);\n\ngoog.object.set(clojure.data.EqualityPartition,\"boolean\",true);\n\nvar G__16457_16639 = clojure.data.equality_partition;\nvar G__16458_16640 = \"boolean\";\nvar G__16459_16641 = ((function (G__16457_16639,G__16458_16640){\nreturn (function (x){\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n});})(G__16457_16639,G__16458_16640))\n;\ngoog.object.set(G__16457_16639,G__16458_16640,G__16459_16641);\n\ngoog.object.set(clojure.data.EqualityPartition,\"_\",true);\n\nvar G__16462_16643 = clojure.data.equality_partition;\nvar G__16463_16644 = \"_\";\nvar G__16464_16645 = ((function (G__16462_16643,G__16463_16644){\nreturn (function (x){\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (1024))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x))){\nreturn new cljs.core.Keyword(null,\"map\",\"map\",1371690461);\n} else {\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (4096))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x))){\nreturn new cljs.core.Keyword(null,\"set\",\"set\",304602554);\n} else {\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (16777216))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x))){\nreturn new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960);\n} else {\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\n\n}\n}\n}\n});})(G__16462_16643,G__16463_16644))\n;\ngoog.object.set(G__16462_16643,G__16463_16644,G__16464_16645);\ngoog.object.set(clojure.data.Diff,\"null\",true);\n\nvar G__16480_16671 = clojure.data.diff_similar;\nvar G__16481_16672 = \"null\";\nvar G__16483_16673 = ((function (G__16480_16671,G__16481_16672){\nreturn (function (a,b){\nreturn clojure.data.atom_diff(a,b);\n});})(G__16480_16671,G__16481_16672))\n;\ngoog.object.set(G__16480_16671,G__16481_16672,G__16483_16673);\n\ngoog.object.set(clojure.data.Diff,\"string\",true);\n\nvar G__16492_16679 = clojure.data.diff_similar;\nvar G__16493_16680 = \"string\";\nvar G__16494_16681 = ((function (G__16492_16679,G__16493_16680){\nreturn (function (a,b){\nreturn clojure.data.atom_diff(a,b);\n});})(G__16492_16679,G__16493_16680))\n;\ngoog.object.set(G__16492_16679,G__16493_16680,G__16494_16681);\n\ngoog.object.set(clojure.data.Diff,\"number\",true);\n\nvar G__16509_16685 = clojure.data.diff_similar;\nvar G__16510_16686 = \"number\";\nvar G__16511_16687 = ((function (G__16509_16685,G__16510_16686){\nreturn (function (a,b){\nreturn clojure.data.atom_diff(a,b);\n});})(G__16509_16685,G__16510_16686))\n;\ngoog.object.set(G__16509_16685,G__16510_16686,G__16511_16687);\n\ngoog.object.set(clojure.data.Diff,\"array\",true);\n\nvar G__16535_16692 = clojure.data.diff_similar;\nvar G__16536_16693 = \"array\";\nvar G__16537_16694 = ((function (G__16535_16692,G__16536_16693){\nreturn (function (a,b){\nreturn clojure.data.diff_sequential(a,b);\n});})(G__16535_16692,G__16536_16693))\n;\ngoog.object.set(G__16535_16692,G__16536_16693,G__16537_16694);\n\ngoog.object.set(clojure.data.Diff,\"function\",true);\n\nvar G__16541_16698 = clojure.data.diff_similar;\nvar G__16542_16699 = \"function\";\nvar G__16543_16700 = ((function (G__16541_16698,G__16542_16699){\nreturn (function (a,b){\nreturn clojure.data.atom_diff(a,b);\n});})(G__16541_16698,G__16542_16699))\n;\ngoog.object.set(G__16541_16698,G__16542_16699,G__16543_16700);\n\ngoog.object.set(clojure.data.Diff,\"boolean\",true);\n\nvar G__16545_16703 = clojure.data.diff_similar;\nvar G__16546_16704 = \"boolean\";\nvar G__16547_16705 = ((function (G__16545_16703,G__16546_16704){\nreturn (function (a,b){\nreturn clojure.data.atom_diff(a,b);\n});})(G__16545_16703,G__16546_16704))\n;\ngoog.object.set(G__16545_16703,G__16546_16704,G__16547_16705);\n\ngoog.object.set(clojure.data.Diff,\"_\",true);\n\nvar G__16550_16706 = clojure.data.diff_similar;\nvar G__16551_16707 = \"_\";\nvar G__16552_16708 = ((function (G__16550_16706,G__16551_16707){\nreturn (function (a,b){\nvar fexpr__16558 = (function (){var G__16559 = clojure.data.equality_partition(a);\nvar G__16559__$1 = (((G__16559 instanceof cljs.core.Keyword))?G__16559.fqn:null);\nswitch (G__16559__$1) {\ncase \"atom\":\nreturn clojure.data.atom_diff;\n\nbreak;\ncase \"set\":\nreturn clojure.data.diff_set;\n\nbreak;\ncase \"sequential\":\nreturn clojure.data.diff_sequential;\n\nbreak;\ncase \"map\":\nreturn clojure.data.diff_associative;\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__16559__$1)].join('')));\n\n}\n})();\nreturn (fexpr__16558.cljs$core$IFn$_invoke$arity$2 ? fexpr__16558.cljs$core$IFn$_invoke$arity$2(a,b) : fexpr__16558.call(null,a,b));\n});})(G__16550_16706,G__16551_16707))\n;\ngoog.object.set(G__16550_16706,G__16551_16707,G__16552_16708);\n/**\n * Recursively compares a and b, returning a tuple of\n *   [things-only-in-a things-only-in-b things-in-both].\n *   Comparison rules:\n * \n *   * For equal a and b, return [nil nil a].\n *   * Maps are subdiffed where keys match and values differ.\n *   * Sets are never subdiffed.\n *   * All sequential things are treated as associative collections\n *  by their indexes, with results returned as vectors.\n *   * Everything else (including strings!) is treated as\n *  an atom and compared for equality.\n */\nclojure.data.diff = (function clojure$data$diff(a,b){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a,b)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,a], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.equality_partition(a),clojure.data.equality_partition(b))){\nreturn clojure.data.diff_similar(a,b);\n} else {\nreturn clojure.data.atom_diff(a,b);\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/data.cljs","~:line",12,"~:column",3,"~:end-line",12,"~:end-column",15,"~:author","Stuart Halloway","~:doc","Non-core data functions."],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.data","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^M","~$set","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^H",["^V",["^R",["^M","~:as","^N"]]]]],"~:flags",["^ ","^R",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/data.cljs"],"~:compiled-at",1547052596797,"~:resource-name","clojure/data.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns \n  ^{:author \"Stuart Halloway\",\n    :doc \"Non-core data functions.\"}\n  clojure.data\n  (:require [clojure.set :as set]))\n\n(declare ^{:arglists '([a b])} diff)\n\n(defn- atom-diff\n  \"Internal helper for diff.\"\n  [a b]\n  (if (= a b) [nil nil a] [a b nil]))\n\n;; for big things a sparse vector class would be better\n(defn- vectorize\n  \"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys\"\n  [m]\n  (when (seq m)\n    (reduce\n     (fn [result [k v]] (assoc result k v))\n     (vec (repeat (apply max (keys m))  nil))\n     m)))\n\n(defn- diff-associative-key\n  \"Diff associative things a and b, comparing only the key k.\"\n  [a b k]\n  (let [va (get a k)\n        vb (get b k)\n        [a* b* ab] (diff va vb)\n        in-a (contains? a k)\n        in-b (contains? b k)\n        same (and in-a in-b\n                  (or (not (nil? ab))\n                      (and (nil? va) (nil? vb))))]\n    [(when (and in-a (or (not (nil? a*)) (not same))) {k a*})\n     (when (and in-b (or (not (nil? b*)) (not same))) {k b*})\n     (when same {k ab})\n     ]))\n\n(defn- diff-associative\n  \"Diff associative things a and b, comparing only keys in ks (if supplied).\"\n  ([a b]\n     (diff-associative a b (set/union (keys a) (keys b))))\n  ([a b ks]\n     (reduce\n      (fn [diff1 diff2]\n        (doall (map merge diff1 diff2)))\n      [nil nil nil]\n      (map\n       (partial diff-associative-key a b)\n       ks))))\n\n(defn- diff-sequential\n  [a b]\n  (vec (map vectorize (diff-associative\n                       (if (vector? a) a (vec a))\n                       (if (vector? b) b (vec b))\n                       (range (max (count a) (count b)))))))\n\n(defn- diff-set\n  [a b]\n  [(not-empty (set/difference a b))\n   (not-empty (set/difference b a))\n   (not-empty (set/intersection a b))])\n\n(defprotocol EqualityPartition\n  \"Implementation detail. Subject to change.\"\n  (equality-partition [x] \"Implementation detail. Subject to change.\"))\n\n(defprotocol Diff\n  \"Implementation detail. Subject to change.\"\n  (diff-similar [a b] \"Implementation detail. Subject to change.\"))\n\n(extend-protocol EqualityPartition\n  nil\n  (equality-partition [x] :atom)\n\n  string\n  (equality-partition [x] :atom)\n\n  number\n  (equality-partition [x] :atom)\n\n  array\n  (equality-partition [x] :sequential)\n\n  function\n  (equality-partition [x] :atom)\n\n  boolean\n  (equality-partition [x] :atom)\n\n  default\n  (equality-partition [x]\n    (cond\n     (satisfies? IMap x) :map\n     (satisfies? ISet x) :set\n     (satisfies? ISequential x) :sequential\n     :default :atom)))\n\n(extend-protocol Diff\n  nil\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  string\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  number\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  array\n  (diff-similar [a b]\n    (diff-sequential a b))\n\n  function\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  boolean\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  default\n  (diff-similar [a b]\n    ((case (equality-partition a)\n       :atom atom-diff\n       :set diff-set\n       :sequential diff-sequential\n       :map diff-associative)\n     a b)))\n\n(defn diff\n  \"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.\"\n  [a b]\n  (if (= a b)\n    [nil nil a]\n    (if (= (equality-partition a) (equality-partition b))\n      (diff-similar a b)\n      (atom-diff a b))))\n  \n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.data/atom-diff","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","a","b","clojure.data/vectorize","cljs.core/seq","m","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__16363","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16364","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","result","k","v","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core/keys","clojure.data/diff-associative-key","vec__16370","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.data/diff","va","vb","cljs.core/contains?","in-a","in-b","ab","a*","same","b*","G__16395","clojure.data/diff-associative","js/Error","clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","diff1","diff2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","ks","clojure.data/diff-sequential","cljs.core/vector?","cljs.core.range.cljs$core$IFn$_invoke$arity$1","x__4135__auto__","y__4136__auto__","cljs.core/count","clojure.data/diff-set","cljs.core/not-empty","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","clojure.data/equality-partition","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","clojure.data/EqualityPartition","x","clojure.data/diff-similar","clojure.data/Diff","goog.object/set","G__16437","G__16438","G__16439","G__16440","G__16441","G__16442","G__16444","G__16445","G__16446","G__16449","G__16450","G__16451","G__16453","G__16454","G__16455","G__16457","G__16458","G__16459","G__16462","G__16463","G__16464","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IMap","cljs.core/ISet","cljs.core/ISequential","G__16480","G__16481","G__16483","G__16492","G__16493","G__16494","G__16509","G__16510","G__16511","G__16535","G__16536","G__16537","G__16541","G__16542","G__16543","G__16545","G__16546","G__16547","G__16550","G__16551","G__16552","fexpr__16558","G__16559","cljs.core/Keyword"]]],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1546977868000],["^11","goog/math/math.js"],[1546977570058,"^P","~$goog.array","~$goog.asserts"],["^11","goog/array/array.js"],[1546977570058,"^P","^1@"],["^11","goog/debug/error.js"],[1546977570058,"^P"],["^11","goog/dom/nodetype.js"],[1546977570058,"^P"],["^11","goog/object/object.js"],[1546977570058,"^P"],"~:SHADOW-TIMESTAMP",[1546977871000,1546977868000],["^11","goog/math/long.js"],[1546977570058,"^P","^1@","~$goog.reflect"],["^11","goog/functions/functions.js"],[1546977570058,"^P"],["^11","goog/structs/map.js"],[1546977570058,"^P","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^11","goog/asserts/asserts.js"],[1546977570058,"^P","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^11","goog/uri/uri.js"],[1546977570058,"^P","^1?","^1@","^1H","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^11","goog/base.js"],[1546977570058],["^11","goog/structs/structs.js"],[1546977570058,"^P","^1?","^1E"],["^11","goog/string/string.js"],[1546977570058,"^P"],["^11","clojure/data.cljs"],[1546977868398,"^P","^O","^M"],["^11","goog/reflect/reflect.js"],[1546977570058,"^P"],["^11","goog/string/stringbuffer.js"],[1546977570058,"^P"],["^11","goog/iter/iter.js"],[1546977570058,"^P","^1?","^1@","~$goog.functions","~$goog.math"],["^11","cljs/core.cljs"],[1546977868398,"~$goog.math.Long","~$goog.math.Integer","^1H","^1E","^1?","~$goog.Uri","~$goog.string.StringBuffer"],["^11","goog/math/integer.js"],[1546977570058,"^P"],["^11","clojure/set.cljs"],[1546977868398,"^P","^O"],["^11","goog/uri/utils.js"],[1546977570058,"^P","^1?","^1@","^1H"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/data.cljs","^7",12,"^8",3,"^9",12,"^:",15,"^;","Stuart Halloway","^<","Non-core data functions."],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"~:shadow/protocol-prefixes",["^F",["clojure$data$EqualityPartition$","clojure$data$Diff$"]],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^F",["^R"]],"~:shadow/js-access-global",["^F",["Error"]],"^S",null,"~:defs",["^ ","~$vectorize",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/data.cljs","^7",23,"^8",8,"^9",23,"^:",17,"~:private",true,"~:arglists",["^V",["~$quote",["^V",[["~$m"]]]]],"^<","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"^1Z",true,"^G","~$clojure.data/vectorize","^6","clojure/data.cljs","^:",17,"~:method-params",["^V",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",23,"~:ret-tag",["^F",["~$any","~$clj-nil"]],"^9",23,"~:max-fixed-arity",1,"~:fn-var",true,"^1[",["^V",["^20",["^V",[["~$m"]]]]],"^<","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"~$diff",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",144,"^8",7,"^9",144,"^:",11,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]],"^<","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"^G","~$clojure.data/diff","^6","clojure/data.cljs","^:",11,"^22",["^V",[["~$a","~$b"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",144,"^26",["^F",["~$cljs.core/IVector","^27"]],"^9",144,"^29",2,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]],"^<","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"~$atom-diff",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",17,"^8",8,"^9",17,"^:",17,"^1Z",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]],"^<","Internal helper for diff."],"^1Z",true,"^G","~$clojure.data/atom-diff","^6","clojure/data.cljs","^:",17,"^22",["^V",[["~$a","~$b"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",17,"^26","^2=","^9",17,"^29",2,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]],"^<","Internal helper for diff."],"~$diff-set",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",69,"^8",8,"^9",69,"^:",16,"^1Z",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]]],"^1Z",true,"^G","~$clojure.data/diff-set","^6","clojure/data.cljs","^:",16,"^22",["^V",[["~$a","~$b"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",69,"^26","^2=","^9",69,"^29",2,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]]],"~$equality-partition",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",77,"^8",4,"^9",77,"^:",22,"~:protocol","~$clojure.data/EqualityPartition","^<","Implementation detail. Subject to change.","^1[",["^V",["^20",["^V",[["~$x"]]]]]],"^2C","^2D","^G","~$clojure.data/equality-partition","^6","clojure/data.cljs","^:",22,"^22",["^V",[["~$x"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",75,"^26","^27","^9",77,"^29",1,"^2:",true,"^1[",["^V",["^20",["^V",[["~$x"]]]]],"^<","Implementation detail. Subject to change."],"~$EqualityPartition",["^ ","^5",["^ ","^6","clojure/data.cljs","^7",75,"^8",14,"^9",75,"^:",31,"^<","Implementation detail. Subject to change.","~:protocol-symbol",true,"~:jsdoc",["^V",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^2B",[["~$x"]]]]],"^2G",true,"^G","^2D","^6","clojure/data.cljs","^:",31,"^8",1,"^7",75,"^2I",["^ ","^2J",["^ ","^2B",[["~$x"]]]],"~:info",null,"^9",75,"~:tag","^27","~:impls",["^F",[null,"~$boolean","~$number","~$default","~$array","~$string","~$function"]],"^<","Implementation detail. Subject to change.","^2H",["^V",["@interface"]]],"~$diff-associative",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",49,"^8",8,"^9",49,"^:",24,"^1Z",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"],["~$a","~$b","~$ks"]]]]],"^<","Diff associative things a and b, comparing only keys in ks (if supplied).","~:top-fn",["^ ","^25",false,"^29",3,"^22",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^1[",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^24",["^V",[null,null]]]],"^1Z",true,"^G","~$clojure.data/diff-associative","^6","clojure/data.cljs","^:",24,"^2V",["^ ","^25",false,"^29",3,"^22",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^1[",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^24",["^V",[null,null]]],"^22",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",49,"^9",49,"^29",3,"^2:",true,"^1[",["^V",[["~$a","~$b"],["~$a","~$b","^2U"]]],"^<","Diff associative things a and b, comparing only keys in ks (if supplied)."],"~$diff-associative-key",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",33,"^8",8,"^9",33,"^:",28,"^1Z",true,"^1[",["^V",["^20",["^V",[["~$a","~$b","~$k"]]]]],"^<","Diff associative things a and b, comparing only the key k."],"^1Z",true,"^G","~$clojure.data/diff-associative-key","^6","clojure/data.cljs","^:",28,"^22",["^V",[["~$a","~$b","~$k"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",33,"^26","^2=","^9",33,"^29",3,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b","~$k"]]]]],"^<","Diff associative things a and b, comparing only the key k."],"~$diff-similar",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",81,"^8",4,"^9",81,"^:",16,"^2C","~$clojure.data/Diff","^<","Implementation detail. Subject to change.","^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]]],"^2C","^2[","^G","~$clojure.data/diff-similar","^6","clojure/data.cljs","^:",16,"^22",["^V",[["~$a","~$b"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",79,"^26","^27","^9",81,"^29",2,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]],"^<","Implementation detail. Subject to change."],"~$Diff",["^ ","^5",["^ ","^6","clojure/data.cljs","^7",79,"^8",14,"^9",79,"^:",18,"^<","Implementation detail. Subject to change.","^2G",true,"^2H",["^V",["@interface"]],"^2I",["^ ","^2J",["^ ","^2Z",[["~$a","~$b"]]]]],"^2G",true,"^G","^2[","^6","clojure/data.cljs","^:",18,"^8",1,"^7",79,"^2I",["^ ","^2J",["^ ","^2Z",[["~$a","~$b"]]]],"^2K",null,"^9",79,"^2L","^27","^2M",["^F",[null,"^2N","^2O","^2P","^2Q","^2R","^2S"]],"^<","Implementation detail. Subject to change.","^2H",["^V",["@interface"]]],"~$diff-sequential",["^ ","^1Y",null,"^5",["^ ","^6","clojure/data.cljs","^7",62,"^8",8,"^9",62,"^:",23,"^1Z",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]]],"^1Z",true,"^G","~$clojure.data/diff-sequential","^6","clojure/data.cljs","^:",23,"^22",["^V",[["~$a","~$b"]]],"^23",null,"^24",["^V",[null,null]],"^8",1,"^25",false,"^7",62,"^26",["^F",["~$clj","^2=","^27","~$cljs.core/MetaFn","^28"]],"^9",62,"^29",2,"^2:",true,"^1[",["^V",["^20",["^V",[["~$a","~$b"]]]]]]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^F",["~:default","~:sequential","~:set","~:atom","~:map"]],"~:order",["^3:","^38","^3;","^39","^37"]],"^Y",["^ ","^R",["^F",[]]],"^Z",["^ "],"^[",["^P","^O","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1=",[["^3?","~:static-fns"],true,["^3?","~:elide-asserts"],false,["^3?","~:optimize-constants"],null,["^3?","~:external-config"],null,["^3?","~:tooling-config"],null,["^3?","~:emit-constants"],null,["^3?","~:infer-externs"],true,["^3?","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3?","~:fn-invoke-direct"],null,["^3?","~:source-map"],"/dev/null"]]]