["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\ngoog.require('cljs.core');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\nreturn (function (p1__16165_SHARP_){\nreturn (max === p1__16165_SHARP_);\n});})(max))\n,coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__16185 = arguments.length;\nswitch (G__16185) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4662__auto__ = [];\nvar len__4641__auto___16308 = arguments.length;\nvar i__4642__auto___16309 = (0);\nwhile(true){\nif((i__4642__auto___16309 < len__4641__auto___16308)){\nargs_arr__4662__auto__.push((arguments[i__4642__auto___16309]));\n\nvar G__16310 = (i__4642__auto___16309 + (1));\ni__4642__auto___16309 = G__16310;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4663__auto__ = (new cljs.core.IndexedSeq(args_arr__4662__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4663__auto__);\n\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.union.cljs$lang$applyTo = (function (seq16182){\nvar G__16183 = cljs.core.first(seq16182);\nvar seq16182__$1 = cljs.core.next(seq16182);\nvar G__16184 = cljs.core.first(seq16182__$1);\nvar seq16182__$2 = cljs.core.next(seq16182__$1);\nvar self__4628__auto__ = this;\nreturn self__4628__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16183,G__16184,seq16182__$2);\n});\n\nclojure.set.union.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__16198 = arguments.length;\nswitch (G__16198) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4662__auto__ = [];\nvar len__4641__auto___16328 = arguments.length;\nvar i__4642__auto___16329 = (0);\nwhile(true){\nif((i__4642__auto___16329 < len__4641__auto___16328)){\nargs_arr__4662__auto__.push((arguments[i__4642__auto___16329]));\n\nvar G__16331 = (i__4642__auto___16329 + (1));\ni__4642__auto___16329 = G__16331;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4663__auto__ = (new cljs.core.IndexedSeq(args_arr__4662__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4663__auto__);\n\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__16337 = s2;\nvar G__16338 = s1;\ns1 = G__16337;\ns2 = G__16338;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__16193_SHARP_){\nreturn (- cljs.core.count(p1__16193_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.intersection.cljs$lang$applyTo = (function (seq16195){\nvar G__16196 = cljs.core.first(seq16195);\nvar seq16195__$1 = cljs.core.next(seq16195);\nvar G__16197 = cljs.core.first(seq16195__$1);\nvar seq16195__$2 = cljs.core.next(seq16195__$1);\nvar self__4628__auto__ = this;\nreturn self__4628__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16196,G__16197,seq16195__$2);\n});\n\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__16226 = arguments.length;\nswitch (G__16226) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4662__auto__ = [];\nvar len__4641__auto___16349 = arguments.length;\nvar i__4642__auto___16350 = (0);\nwhile(true){\nif((i__4642__auto___16350 < len__4641__auto___16349)){\nargs_arr__4662__auto__.push((arguments[i__4642__auto___16350]));\n\nvar G__16351 = (i__4642__auto___16350 + (1));\ni__4642__auto___16350 = G__16351;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4663__auto__ = (new cljs.core.IndexedSeq(args_arr__4662__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4663__auto__);\n\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n});\n\n/** @this {Function} */\nclojure.set.difference.cljs$lang$applyTo = (function (seq16223){\nvar G__16224 = cljs.core.first(seq16223);\nvar seq16223__$1 = cljs.core.next(seq16223);\nvar G__16225 = cljs.core.first(seq16223__$1);\nvar seq16223__$2 = cljs.core.next(seq16223__$1);\nvar self__4628__auto__ = this;\nreturn self__4628__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16224,G__16225,seq16223__$2);\n});\n\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16243_SHARP_){\nreturn cljs.core.select_keys(p1__16243_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__16248){\nvar vec__16249 = p__16248;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16249,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16249,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16252_SHARP_){\nreturn clojure.set.rename_keys(p1__16252_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__16260){\nvar vec__16261 = p__16260;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16261,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16261,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__16269 = arguments.length;\nswitch (G__16269) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__16271 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16271,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16271,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__16271,r,s,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__16274 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__16274) : idx.call(null,G__16274));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__16271,r,s,idx){\nreturn (function (p1__16264_SHARP_,p2__16265_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16264_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__16265_SHARP_,x], 0)));\n});})(found,ks,vec__16271,r,s,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(ks,vec__16271,r,s,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__16278 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16278,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16278,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16278,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__16278,r,s,k,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__16284 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__16284) : idx.call(null,G__16284));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__16278,r,s,k,idx){\nreturn (function (p1__16266_SHARP_,p2__16267_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16266_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__16267_SHARP_,x], 0)));\n});})(found,vec__16278,r,s,k,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(vec__16278,r,s,k,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n});\n\nclojure.set.join.cljs$lang$maxFixedArity = 3;\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__16286_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__16286_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__16293_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__16293_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^M","~$goog","^N"],"~:seen",["^F",[]],"~:uses",null,"~:require-macros",["^ ","^M","^M"],"~:form",["~#list",["~$ns","^H"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^N","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1547198243018,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","k","coll","cljs.core/cons","max","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__16165#","G__16185","clojure.set/union","i__4642__auto__","len__4641__auto__","args-arr__4662__auto__","cljs.core/IndexedSeq","argseq__4663__auto__","cljs.core/first","seq16182","cljs.core/next","self__4628__auto__","G__16183","G__16184","s1","cljs.core/count","s2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","sets","cljs.core/into","bubbled-sets","cljs.core/rest","G__16198","clojure.set/intersection","seq16195","G__16196","G__16197","cljs.core/contains?","item","result","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__16193#","G__16226","clojure.set/difference","seq16223","G__16224","G__16225","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","s","xset","clojure.set/project","cljs.core/set","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__16243#","cljs.core/select-keys","ks","xrel","clojure.set/rename-keys","p__16248","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16249","map","old","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","new","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","kmap","clojure.set/rename","p1__16252#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__16260","vec__16261","v","G__16269","clojure.set/join","js/Error","cljs.core/seq","yrel","vec__16271","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","G__16274","idx","found","p1__16264#","p2__16265#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","ret","vec__16278","km","cljs.core/vals","G__16284","p1__16266#","p2__16267#","clojure.set/subset?","set1","set2","cljs.core/every?","p1__16286#","clojure.set/superset?","p1__16293#"]]],"~:cache-keys",["~#cmap",[["~:macro","^M"],[1546977868000],["^Y","goog/math/math.js"],[1546977570058,"^N","~$goog.array","~$goog.asserts"],["^Y","goog/array/array.js"],[1546977570058,"^N","^1<"],["^Y","goog/debug/error.js"],[1546977570058,"^N"],["^Y","goog/dom/nodetype.js"],[1546977570058,"^N"],["^Y","goog/object/object.js"],[1546977570058,"^N"],"~:SHADOW-TIMESTAMP",[1546977871000,1546977868000],["^Y","goog/math/long.js"],[1546977570058,"^N","^1<","~$goog.reflect"],["^Y","goog/functions/functions.js"],[1546977570058,"^N"],["^Y","goog/structs/map.js"],[1546977570058,"^N","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Y","goog/asserts/asserts.js"],[1546977570058,"^N","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Y","goog/uri/uri.js"],[1546977570058,"^N","^1;","^1<","^1D","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Y","goog/base.js"],[1546977570058],["^Y","goog/structs/structs.js"],[1546977570058,"^N","^1;","^1A"],["^Y","goog/string/string.js"],[1546977570058,"^N"],["^Y","goog/reflect/reflect.js"],[1546977570058,"^N"],["^Y","goog/string/stringbuffer.js"],[1546977570058,"^N"],["^Y","goog/iter/iter.js"],[1546977570058,"^N","^1;","^1<","~$goog.functions","~$goog.math"],["^Y","cljs/core.cljs"],[1546977868398,"~$goog.math.Long","~$goog.math.Integer","^1D","^1A","^1;","~$goog.Uri","~$goog.string.StringBuffer"],["^Y","goog/math/integer.js"],[1546977570058,"^N"],["^Y","clojure/set.cljs"],[1546977868398,"^N","^M"],["^Y","goog/uri/utils.js"],[1546977570058,"^N","^1;","^1<","^1D"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N"],"^O",["^F",[]],"~:shadow/js-access-global",["^F",["Error"]],"^P",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^S",["~$quote",["^S",[[],["~$s1"],["^1W","~$s2"],["^1W","^1X","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:max-fixed-arity",2,"~:method-params",["^S",[[],["^1W"],["^1W","^1X"]]],"^1U",["^S",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"~:arglists-meta",["^S",[null,null,null,null]]]],"^G","~$clojure.set/union","^6","clojure/set.cljs","^:",12,"^1Z",["^ ","^1[",true,"^20",2,"^21",["^S",[[],["^1W"],["^1W","^1X"]]],"^1U",["^S",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^22",["^S",[null,null,null,null]]],"^21",["^S",[[],["^1W"],["^1W","^1X"]]],"~:protocol-impl",null,"^22",["^S",[null,null,null,null]],"^8",1,"^1[",true,"^7",19,"^9",19,"^20",2,"~:fn-var",true,"^1U",["^S",[[],["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^1U",["^S",["^1V",["^S",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^G","~$clojure.set/map-invert","^6","clojure/set.cljs","^:",17,"^21",["^S",[["~$m"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",97,"~:ret-tag","~$any","^9",97,"^20",1,"^25",true,"^1U",["^S",["^1V",["^S",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^1U",["^S",["^1V",["^S",[["~$xrel","~$yrel"],["^2;","^2<","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^1Z",["^ ","^1[",false,"^20",3,"^21",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^1U",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^22",["^S",[null,null]]]],"^G","~$clojure.set/join","^6","clojure/set.cljs","^:",11,"^1Z",["^ ","^1[",false,"^20",3,"^21",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^1U",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^22",["^S",[null,null]]],"^21",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",101,"^9",101,"^20",3,"^25",true,"^1U",["^S",[["^2;","^2<"],["^2;","^2<","^2="]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^1U",["^S",["^1V",["^S",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^G","~$clojure.set/select","^6","clojure/set.cljs","^:",13,"^21",["^S",[["^2@","^2A"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",61,"^28","^29","^9",61,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2@","^2A"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^1U",["^S",["^1V",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]]]],"^;","Return a set that is the intersection of the input sets","^1Z",["^ ","^1[",true,"^20",2,"^21",["^S",[["^1W"],["^1W","^1X"]]],"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^22",["^S",[null,null,null]]]],"^G","~$clojure.set/intersection","^6","clojure/set.cljs","^:",19,"^1Z",["^ ","^1[",true,"^20",2,"^21",["^S",[["^1W"],["^1W","^1X"]]],"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^22",["^S",[null,null,null]]],"^21",["^S",[["^1W"],["^1W","^1X"]]],"^24",null,"^22",["^S",[null,null,null]],"^8",1,"^1[",true,"^7",31,"^9",31,"^20",2,"^25",true,"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^1U",["^S",["^1V",["^S",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^G","~$clojure.set/superset?","^6","clojure/set.cljs","^:",16,"^21",["^S",[["^2F","^2G"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",137,"^28","~$boolean","^9",137,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2F","^2G"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^1U",["^S",["^1V",["^S",[["^2;","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^G","~$clojure.set/index","^6","clojure/set.cljs","^:",12,"^21",["^S",[["^2;","^2K"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",87,"^28","^29","^9",87,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2;","^2K"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^1U",["^S",["^1V",["^S",[["~$k","~$coll"]]]]]],"^2N",true,"^G","~$clojure.set/bubble-max-key","^6","clojure/set.cljs","^:",22,"^21",["^S",[["~$k","^2O"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",13,"^28","~$cljs.core/Cons","^9",13,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["~$k","^2O"]]]]]],"~$subset?",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^1U",["^S",["^1V",["^S",[["^2F","^2G"]]]]],"^;","Is set1 a subset of set2?"],"^G","~$clojure.set/subset?","^6","clojure/set.cljs","^:",14,"^21",["^S",[["^2F","^2G"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",131,"^28","^2I","^9",131,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2F","^2G"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^1U",["^S",["^1V",["^S",[["^2;","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^G","~$clojure.set/rename","^6","clojure/set.cljs","^:",13,"^21",["^S",[["^2;","^2U"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",82,"^28",["^F",["~$clj","^29","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2;","^2U"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^1U",["^S",["^1V",["^S",[["~$map","^2U"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^G","~$clojure.set/rename-keys","^6","clojure/set.cljs","^:",18,"^21",["^S",[["^30","^2U"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",72,"^28","^29","^9",72,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^30","^2U"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^1U",["^S",["^1V",["^S",[["^2;","^2K"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^G","~$clojure.set/project","^6","clojure/set.cljs","^:",14,"^21",["^S",[["^2;","^2K"]]],"^24",null,"^22",["^S",[null,null]],"^8",1,"^1[",false,"^7",67,"^28",["^F",["^2W","^29","^2X","^2Y","^2Z"]],"^9",67,"^20",2,"^25",true,"^1U",["^S",["^1V",["^S",[["^2;","^2K"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^1T",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^1U",["^S",["^1V",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^1Z",["^ ","^1[",true,"^20",2,"^21",["^S",[["^1W"],["^1W","^1X"]]],"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^22",["^S",[null,null,null]]]],"^G","~$clojure.set/difference","^6","clojure/set.cljs","^:",17,"^1Z",["^ ","^1[",true,"^20",2,"^21",["^S",[["^1W"],["^1W","^1X"]]],"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^22",["^S",[null,null,null]]],"^21",["^S",[["^1W"],["^1W","^1X"]]],"^24",null,"^22",["^S",[null,null,null]],"^8",1,"^1[",true,"^7",46,"^9",46,"^20",2,"^25",true,"^1U",["^S",[["^1W"],["^1W","^1X"],["^1W","^1X","~$&","^1Y"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^Q",["^ ","^M","^M"],"^U",["^ "],"^V",["^ "],"^W",["^N","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^19",[["^38","~:static-fns"],true,["^38","~:elide-asserts"],false,["^38","~:optimize-constants"],null,["^38","~:external-config"],null,["^38","~:tooling-config"],null,["^38","~:emit-constants"],null,["^38","~:infer-externs"],true,["^38","^12"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^38","~:fn-invoke-direct"],null,["^38","~:source-map"],"/dev/null"]]]