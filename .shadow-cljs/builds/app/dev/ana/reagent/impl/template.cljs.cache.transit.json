["^ ","~:output",["^ ","~:js","goog.provide('reagent.impl.template');\ngoog.require('cljs.core');\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\ngoog.require('clojure.string');\ngoog.require('clojure.walk');\ngoog.require('reagent.impl.util');\ngoog.require('reagent.impl.component');\ngoog.require('reagent.impl.batching');\ngoog.require('reagent.ratom');\ngoog.require('reagent.interop');\ngoog.require('reagent.debug');\n/**\n * Regular expression that parses a CSS-style id and class\n *           from a tag name.\n */\nreagent.impl.template.re_tag = /([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?/;\n\n/**\n* @constructor\n*/\nreagent.impl.template.NativeWrapper = (function (){\n});\n\nreagent.impl.template.NativeWrapper.getBasis = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n});\n\nreagent.impl.template.NativeWrapper.cljs$lang$type = true;\n\nreagent.impl.template.NativeWrapper.cljs$lang$ctorStr = \"reagent.impl.template/NativeWrapper\";\n\nreagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = (function (this__4290__auto__,writer__4291__auto__,opt__4292__auto__){\nreturn cljs.core._write(writer__4291__auto__,\"reagent.impl.template/NativeWrapper\");\n});\n\n/**\n * Positional factory function for reagent.impl.template/NativeWrapper.\n */\nreagent.impl.template.__GT_NativeWrapper = (function reagent$impl$template$__GT_NativeWrapper(){\nreturn (new reagent.impl.template.NativeWrapper());\n});\n\nreagent.impl.template.named_QMARK_ = (function reagent$impl$template$named_QMARK_(x){\nreturn (((x instanceof cljs.core.Keyword)) || ((x instanceof cljs.core.Symbol)));\n});\nreagent.impl.template.hiccup_tag_QMARK_ = (function reagent$impl$template$hiccup_tag_QMARK_(x){\nreturn ((reagent.impl.template.named_QMARK_(x)) || (typeof x === 'string'));\n});\nreagent.impl.template.valid_tag_QMARK_ = (function reagent$impl$template$valid_tag_QMARK_(x){\nreturn ((reagent.impl.template.hiccup_tag_QMARK_(x)) || (cljs.core.ifn_QMARK_(x)) || ((x instanceof reagent.impl.template.NativeWrapper)));\n});\nreagent.impl.template.prop_name_cache = ({\"class\": \"className\", \"for\": \"htmlFor\", \"charset\": \"charSet\"});\nreagent.impl.template.cache_get = (function reagent$impl$template$cache_get(o,k){\nif(o.hasOwnProperty(k)){\nreturn (o[k]);\n} else {\nreturn null;\n}\n});\nreagent.impl.template.cached_prop_name = (function reagent$impl$template$cached_prop_name(k){\nif(reagent.impl.template.named_QMARK_(k)){\nvar temp__5459__auto__ = reagent.impl.template.cache_get(reagent.impl.template.prop_name_cache,cljs.core.name(k));\nif((temp__5459__auto__ == null)){\nreturn (reagent.impl.template.prop_name_cache[cljs.core.name(k)] = reagent.impl.util.dash_to_camel(k));\n} else {\nvar k_SINGLEQUOTE_ = temp__5459__auto__;\nreturn k_SINGLEQUOTE_;\n}\n} else {\nreturn k;\n}\n});\nreagent.impl.template.js_val_QMARK_ = (function reagent$impl$template$js_val_QMARK_(x){\nreturn (!((\"object\" === goog.typeOf(x))));\n});\nreagent.impl.template.kv_conv = (function reagent$impl$template$kv_conv(o,k,v){\nvar G__22339 = o;\n(G__22339[reagent.impl.template.cached_prop_name(k)] = (reagent.impl.template.convert_prop_value.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.convert_prop_value.cljs$core$IFn$_invoke$arity$1(v) : reagent.impl.template.convert_prop_value.call(null,v)));\n\nreturn G__22339;\n});\nreagent.impl.template.convert_prop_value = (function reagent$impl$template$convert_prop_value(x){\nif(reagent.impl.template.js_val_QMARK_(x)){\nreturn x;\n} else {\nif(reagent.impl.template.named_QMARK_(x)){\nreturn cljs.core.name(x);\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.reduce_kv(reagent.impl.template.kv_conv,({}),x);\n} else {\nif(cljs.core.coll_QMARK_(x)){\nreturn cljs.core.clj__GT_js(x);\n} else {\nif(cljs.core.ifn_QMARK_(x)){\nreturn (function() { \nvar G__22582__delegate = function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(x,args);\n};\nvar G__22582 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__22584__i = 0, G__22584__a = new Array(arguments.length -  0);\nwhile (G__22584__i < G__22584__a.length) {G__22584__a[G__22584__i] = arguments[G__22584__i + 0]; ++G__22584__i;}\n  args = new cljs.core.IndexedSeq(G__22584__a,0,null);\n} \nreturn G__22582__delegate.call(this,args);};\nG__22582.cljs$lang$maxFixedArity = 0;\nG__22582.cljs$lang$applyTo = (function (arglist__22585){\nvar args = cljs.core.seq(arglist__22585);\nreturn G__22582__delegate(args);\n});\nG__22582.cljs$core$IFn$_invoke$arity$variadic = G__22582__delegate;\nreturn G__22582;\n})()\n;\n} else {\nreturn cljs.core.clj__GT_js(x);\n\n}\n}\n}\n}\n}\n});\nreagent.impl.template.custom_prop_name_cache = ({});\nreagent.impl.template.cached_custom_prop_name = (function reagent$impl$template$cached_custom_prop_name(k){\nif(reagent.impl.template.named_QMARK_(k)){\nvar temp__5459__auto__ = reagent.impl.template.cache_get(reagent.impl.template.custom_prop_name_cache,cljs.core.name(k));\nif((temp__5459__auto__ == null)){\nreturn (reagent.impl.template.custom_prop_name_cache[cljs.core.name(k)] = reagent.impl.util.dash_to_camel(k));\n} else {\nvar k_SINGLEQUOTE_ = temp__5459__auto__;\nreturn k_SINGLEQUOTE_;\n}\n} else {\nreturn k;\n}\n});\nreagent.impl.template.custom_kv_conv = (function reagent$impl$template$custom_kv_conv(o,k,v){\nvar G__22370 = o;\n(G__22370[reagent.impl.template.cached_custom_prop_name(k)] = reagent.impl.template.convert_prop_value(v));\n\nreturn G__22370;\n});\nreagent.impl.template.convert_custom_prop_value = (function reagent$impl$template$convert_custom_prop_value(x){\nif(reagent.impl.template.js_val_QMARK_(x)){\nreturn x;\n} else {\nif(reagent.impl.template.named_QMARK_(x)){\nreturn cljs.core.name(x);\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.reduce_kv(reagent.impl.template.custom_kv_conv,({}),x);\n} else {\nif(cljs.core.coll_QMARK_(x)){\nreturn cljs.core.clj__GT_js(x);\n} else {\nif(cljs.core.ifn_QMARK_(x)){\nreturn (function() { \nvar G__22590__delegate = function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(x,args);\n};\nvar G__22590 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__22592__i = 0, G__22592__a = new Array(arguments.length -  0);\nwhile (G__22592__i < G__22592__a.length) {G__22592__a[G__22592__i] = arguments[G__22592__i + 0]; ++G__22592__i;}\n  args = new cljs.core.IndexedSeq(G__22592__a,0,null);\n} \nreturn G__22590__delegate.call(this,args);};\nG__22590.cljs$lang$maxFixedArity = 0;\nG__22590.cljs$lang$applyTo = (function (arglist__22593){\nvar args = cljs.core.seq(arglist__22593);\nreturn G__22590__delegate(args);\n});\nG__22590.cljs$core$IFn$_invoke$arity$variadic = G__22590__delegate;\nreturn G__22590;\n})()\n;\n} else {\nreturn cljs.core.clj__GT_js(x);\n\n}\n}\n}\n}\n}\n});\nreagent.impl.template.oset = (function reagent$impl$template$oset(o,k,v){\nvar G__22371 = (((o == null))?({}):o);\n(G__22371[k] = v);\n\nreturn G__22371;\n});\nreagent.impl.template.oget = (function reagent$impl$template$oget(o,k){\nif((o == null)){\nreturn null;\n} else {\nreturn (o[k]);\n}\n});\n/**\n * Takes the id and class from tag keyword, and adds them to the\n *   other props. Parsed tag is JS object with :id and :class properties.\n */\nreagent.impl.template.set_id_class = (function reagent$impl$template$set_id_class(props,id_class){\nvar id = (id_class[\"id\"]);\nvar class$ = (id_class[\"class\"]);\nvar G__22376 = props;\nvar G__22376__$1 = (((((!((id == null)))) && ((new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(props) == null))))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__22376,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),id):G__22376);\nif(cljs.core.truth_(class$)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__22376__$1,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),(function (){var old_class = new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(props);\nif((old_class == null)){\nreturn class$;\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(((reagent.impl.template.named_QMARK_(old_class))?cljs.core.name(old_class):old_class))].join('');\n}\n})());\n} else {\nreturn G__22376__$1;\n}\n});\nreagent.impl.template.stringify_class = (function reagent$impl$template$stringify_class(p__22412){\nvar map__22413 = p__22412;\nvar map__22413__$1 = (((((!((map__22413 == null))))?(((((map__22413.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__22413.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__22413):map__22413);\nvar props = map__22413__$1;\nvar class$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22413__$1,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996));\nif(cljs.core.coll_QMARK_(class$)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(props,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.keep.cljs$core$IFn$_invoke$arity$2(((function (map__22413,map__22413__$1,props,class$){\nreturn (function (c){\nif(cljs.core.truth_(c)){\nif(reagent.impl.template.named_QMARK_(c)){\nreturn cljs.core.name(c);\n} else {\nreturn c;\n}\n} else {\nreturn null;\n}\n});})(map__22413,map__22413__$1,props,class$))\n,class$)));\n} else {\nreturn props;\n}\n});\nreagent.impl.template.convert_props = (function reagent$impl$template$convert_props(props,id_class){\nvar props__$1 = reagent.impl.template.set_id_class(reagent.impl.template.stringify_class(props),id_class);\nif(cljs.core.truth_((id_class[\"custom\"]))){\nreturn reagent.impl.template.convert_custom_prop_value(props__$1);\n} else {\nreturn reagent.impl.template.convert_prop_value(props__$1);\n}\n});\nif((typeof reagent !== 'undefined') && (typeof reagent.impl !== 'undefined') && (typeof reagent.impl.template !== 'undefined') && (typeof reagent.impl.template.find_dom_node !== 'undefined')){\n} else {\nreagent.impl.template.find_dom_node = null;\n}\nreagent.impl.template.these_inputs_have_selection_api = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [\"url\",null,\"tel\",null,\"text\",null,\"textarea\",null,\"password\",null,\"search\",null], null), null);\nreagent.impl.template.has_selection_api_QMARK_ = (function reagent$impl$template$has_selection_api_QMARK_(input_type){\nreturn cljs.core.contains_QMARK_(reagent.impl.template.these_inputs_have_selection_api,input_type);\n});\nreagent.impl.template.input_node_set_value = (function reagent$impl$template$input_node_set_value(node,rendered_value,dom_value,component,p__22443){\nvar map__22448 = p__22443;\nvar map__22448__$1 = (((((!((map__22448 == null))))?(((((map__22448.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__22448.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__22448):map__22448);\nvar on_write = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__22448__$1,new cljs.core.Keyword(null,\"on-write\",\"on-write\",31519475));\nif((!((((node === (document[\"activeElement\"]))) && (reagent.impl.template.has_selection_api_QMARK_((node[\"type\"]))) && (typeof rendered_value === 'string') && (typeof dom_value === 'string'))))){\n(component[\"cljsDOMValue\"] = rendered_value);\n\n(node[\"value\"] = rendered_value);\n\nif(cljs.core.fn_QMARK_(on_write)){\nreturn (on_write.cljs$core$IFn$_invoke$arity$1 ? on_write.cljs$core$IFn$_invoke$arity$1(rendered_value) : on_write.call(null,rendered_value));\n} else {\nreturn null;\n}\n} else {\nvar node_value = (node[\"value\"]);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(node_value,dom_value)){\nreturn reagent.impl.batching.do_after_render(((function (node_value,map__22448,map__22448__$1,on_write){\nreturn (function (){\nreturn (reagent.impl.template.input_component_set_value.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.input_component_set_value.cljs$core$IFn$_invoke$arity$1(component) : reagent.impl.template.input_component_set_value.call(null,component));\n});})(node_value,map__22448,map__22448__$1,on_write))\n);\n} else {\nvar existing_offset_from_end = (cljs.core.count(node_value) - (node[\"selectionStart\"]));\nvar new_cursor_offset = (cljs.core.count(rendered_value) - existing_offset_from_end);\n(component[\"cljsDOMValue\"] = rendered_value);\n\n(node[\"value\"] = rendered_value);\n\nif(cljs.core.fn_QMARK_(on_write)){\n(on_write.cljs$core$IFn$_invoke$arity$1 ? on_write.cljs$core$IFn$_invoke$arity$1(rendered_value) : on_write.call(null,rendered_value));\n} else {\n}\n\n(node[\"selectionStart\"] = new_cursor_offset);\n\nreturn (node[\"selectionEnd\"] = new_cursor_offset);\n}\n}\n});\nreagent.impl.template.input_component_set_value = (function reagent$impl$template$input_component_set_value(this$){\nif(cljs.core.truth_((this$[\"cljsInputLive\"]))){\n(this$[\"cljsInputDirty\"] = false);\n\nvar rendered_value = (this$[\"cljsRenderedValue\"]);\nvar dom_value = (this$[\"cljsDOMValue\"]);\nvar node = (reagent.impl.template.find_dom_node.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.find_dom_node.cljs$core$IFn$_invoke$arity$1(this$) : reagent.impl.template.find_dom_node.call(null,this$));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(rendered_value,dom_value)){\nreturn reagent.impl.template.input_node_set_value(node,rendered_value,dom_value,this$,cljs.core.PersistentArrayMap.EMPTY);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nreagent.impl.template.input_handle_change = (function reagent$impl$template$input_handle_change(this$,on_change,e){\n(this$[\"cljsDOMValue\"] = e.target.value);\n\nif(cljs.core.truth_((this$[\"cljsInputDirty\"]))){\n} else {\n(this$[\"cljsInputDirty\"] = true);\n\nreagent.impl.batching.do_after_render((function (){\nreturn reagent.impl.template.input_component_set_value(this$);\n}));\n}\n\nreturn (on_change.cljs$core$IFn$_invoke$arity$1 ? on_change.cljs$core$IFn$_invoke$arity$1(e) : on_change.call(null,e));\n});\nreagent.impl.template.input_render_setup = (function reagent$impl$template$input_render_setup(this$,jsprops){\nif(cljs.core.truth_((function (){var and__4036__auto__ = (!((jsprops == null)));\nif(and__4036__auto__){\nvar and__4036__auto____$1 = jsprops.hasOwnProperty(\"onChange\");\nif(cljs.core.truth_(and__4036__auto____$1)){\nreturn jsprops.hasOwnProperty(\"value\");\n} else {\nreturn and__4036__auto____$1;\n}\n} else {\nreturn and__4036__auto__;\n}\n})())){\nif(cljs.core.truth_(reagent.impl.template.find_dom_node)){\n} else {\nthrow (new Error([\"Assert failed: \",\"reagent.dom needs to be loaded for controlled input to work\",\"\\n\",\"find-dom-node\"].join('')));\n}\n\nvar v = (jsprops[\"value\"]);\nvar value = (((v == null))?\"\":v);\nvar on_change = (jsprops[\"onChange\"]);\nif(cljs.core.truth_((this$[\"cljsInputLive\"]))){\n} else {\n(this$[\"cljsInputLive\"] = true);\n\n(this$[\"cljsDOMValue\"] = value);\n}\n\n(this$[\"cljsRenderedValue\"] = value);\n\ndelete jsprops[\"value\"];\n\nvar G__22477 = jsprops;\n(G__22477[\"defaultValue\"] = value);\n\n(G__22477[\"onChange\"] = ((function (G__22477,v,value,on_change){\nreturn (function (p1__22474_SHARP_){\nreturn reagent.impl.template.input_handle_change(this$,on_change,p1__22474_SHARP_);\n});})(G__22477,v,value,on_change))\n);\n\nreturn G__22477;\n} else {\nreturn null;\n}\n});\nreagent.impl.template.input_unmount = (function reagent$impl$template$input_unmount(this$){\nreturn (this$[\"cljsInputLive\"] = null);\n});\nreagent.impl.template.input_component_QMARK_ = (function reagent$impl$template$input_component_QMARK_(x){\nvar G__22480 = x;\nswitch (G__22480) {\ncase \"input\":\ncase \"textarea\":\nreturn true;\n\nbreak;\ndefault:\nreturn false;\n\n}\n});\nreagent.impl.template.reagent_input_class = null;\nreagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),\"ReagentInput\",new cljs.core.Keyword(null,\"component-did-update\",\"component-did-update\",-1468549173),reagent.impl.template.input_component_set_value,new cljs.core.Keyword(null,\"component-will-unmount\",\"component-will-unmount\",-2058314698),reagent.impl.template.input_unmount,new cljs.core.Keyword(null,\"reagent-render\",\"reagent-render\",-985383853),(function (argv,comp,jsprops,first_child){\nvar this$ = reagent.impl.component._STAR_current_component_STAR_;\nreagent.impl.template.input_render_setup(this$,jsprops);\n\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,comp,jsprops,first_child) : reagent.impl.template.make_element.call(null,argv,comp,jsprops,first_child));\n})], null);\nreagent.impl.template.reagent_input = (function reagent$impl$template$reagent_input(){\nif((reagent.impl.template.reagent_input_class == null)){\nreagent.impl.template.reagent_input_class = reagent.impl.component.create_class(reagent.impl.template.input_spec);\n} else {\n}\n\nreturn reagent.impl.template.reagent_input_class;\n});\nreagent.impl.template.parse_tag = (function reagent$impl$template$parse_tag(hiccup_tag){\nvar vec__22484 = cljs.core.next(cljs.core.re_matches(reagent.impl.template.re_tag,cljs.core.name(hiccup_tag)));\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22484,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22484,(1),null);\nvar class$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22484,(2),null);\nvar class$__$1 = (((class$ == null))?null:clojure.string.replace(class$,/\\./,\" \"));\nif(cljs.core.truth_(tag)){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1([\"Invalid tag: '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccup_tag),\"'\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.component.comp_name())].join('')),\"\\n\",\"tag\"].join('')));\n}\n\nreturn ({\"name\": tag, \"id\": id, \"class\": class$__$1, \"custom\": cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((-1),tag.indexOf(\"-\"))});\n});\nreagent.impl.template.try_get_key = (function reagent$impl$template$try_get_key(x){\ntry{return cljs.core.get.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}catch (e22492){var e = e22492;\nreturn null;\n}});\nreagent.impl.template.get_key = (function reagent$impl$template$get_key(x){\nif(cljs.core.map_QMARK_(x)){\nreturn reagent.impl.template.try_get_key(x);\n} else {\nreturn null;\n}\n});\nreagent.impl.template.key_from_vec = (function reagent$impl$template$key_from_vec(v){\nvar temp__5459__auto__ = reagent.impl.template.get_key(cljs.core.meta(v));\nif((temp__5459__auto__ == null)){\nreturn reagent.impl.template.get_key(cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(1),null));\n} else {\nvar k = temp__5459__auto__;\nreturn k;\n}\n});\nreagent.impl.template.reag_element = (function reagent$impl$template$reag_element(tag,v){\nvar c = reagent.impl.component.as_class(tag);\nvar jsprops = ({\"argv\": v});\nvar temp__5461__auto___22629 = reagent.impl.template.key_from_vec(v);\nif((temp__5461__auto___22629 == null)){\n} else {\nvar key_22630 = temp__5461__auto___22629;\n(jsprops[\"key\"] = key_22630);\n}\n\nreturn module$node_modules$react$index.createElement(c,jsprops);\n});\nreagent.impl.template.fragment_element = (function reagent$impl$template$fragment_element(argv){\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(argv,(1),null);\nvar hasprops = (((props == null)) || (cljs.core.map_QMARK_(props)));\nvar jsprops = reagent.impl.template.convert_prop_value(((hasprops)?props:null));\nvar first_child = ((1) + ((hasprops)?(1):(0)));\nvar temp__5461__auto___22633 = reagent.impl.template.key_from_vec(argv);\nif((temp__5461__auto___22633 == null)){\n} else {\nvar key_22634 = temp__5461__auto___22633;\nreagent.impl.template.oset(jsprops,\"key\",key_22634);\n}\n\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,module$node_modules$react$index.Fragment,jsprops,first_child) : reagent.impl.template.make_element.call(null,argv,module$node_modules$react$index.Fragment,jsprops,first_child));\n});\nreagent.impl.template.adapt_react_class = (function reagent$impl$template$adapt_react_class(c){\nvar G__22493 = reagent.impl.template.__GT_NativeWrapper();\n(G__22493[\"name\"] = c);\n\n(G__22493[\"id\"] = null);\n\n(G__22493[\"class\"] = null);\n\nreturn G__22493;\n});\nreagent.impl.template.tag_name_cache = ({});\nreagent.impl.template.cached_parse = (function reagent$impl$template$cached_parse(x){\nvar temp__5459__auto__ = reagent.impl.template.cache_get(reagent.impl.template.tag_name_cache,x);\nif((temp__5459__auto__ == null)){\nreturn (reagent.impl.template.tag_name_cache[x] = reagent.impl.template.parse_tag(x));\n} else {\nvar s = temp__5459__auto__;\nreturn s;\n}\n});\nreagent.impl.template.native_element = (function reagent$impl$template$native_element(parsed,argv,first){\nvar comp = (parsed[\"name\"]);\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(argv,first,null);\nvar hasprops = (((props == null)) || (cljs.core.map_QMARK_(props)));\nvar jsprops = reagent.impl.template.convert_props(((hasprops)?props:null),parsed);\nvar first_child = (first + ((hasprops)?(1):(0)));\nif(reagent.impl.template.input_component_QMARK_(comp)){\nvar G__22494 = cljs.core.with_meta(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input(),argv,comp,jsprops,first_child], null),cljs.core.meta(argv));\nreturn (reagent.impl.template.as_element.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.as_element.cljs$core$IFn$_invoke$arity$1(G__22494) : reagent.impl.template.as_element.call(null,G__22494));\n} else {\nvar key = reagent.impl.template.get_key(cljs.core.meta(argv));\nvar p = (((key == null))?jsprops:reagent.impl.template.oset(jsprops,\"key\",key));\nreturn (reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4 ? reagent.impl.template.make_element.cljs$core$IFn$_invoke$arity$4(argv,comp,p,first_child) : reagent.impl.template.make_element.call(null,argv,comp,p,first_child));\n}\n});\nreagent.impl.template.str_coll = (function reagent$impl$template$str_coll(coll){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.walk.prewalk((function (x){\nif(cljs.core.fn_QMARK_(x)){\nvar n = reagent.impl.util.fun_name(x);\nvar G__22495 = n;\nswitch (G__22495) {\ncase \"\":\nreturn x;\n\nbreak;\ndefault:\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(n);\n\n}\n} else {\nreturn x;\n}\n}),coll));\n\n});\nreagent.impl.template.hiccup_err = (function reagent$impl$template$hiccup_err(var_args){\nvar args__4647__auto__ = [];\nvar len__4641__auto___22644 = arguments.length;\nvar i__4642__auto___22645 = (0);\nwhile(true){\nif((i__4642__auto___22645 < len__4641__auto___22644)){\nargs__4647__auto__.push((arguments[i__4642__auto___22645]));\n\nvar G__22646 = (i__4642__auto___22645 + (1));\ni__4642__auto___22645 = G__22646;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4648__auto__ = ((((1) < args__4647__auto__.length))?(new cljs.core.IndexedSeq(args__4647__auto__.slice((1)),(0),null)):null);\nreturn reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4648__auto__);\n});\n\nreagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic = (function (v,msg){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,msg)),\": \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.str_coll(v)),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.component.comp_name())].join('');\n});\n\nreagent.impl.template.hiccup_err.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.impl.template.hiccup_err.cljs$lang$applyTo = (function (seq22496){\nvar G__22497 = cljs.core.first(seq22496);\nvar seq22496__$1 = cljs.core.next(seq22496);\nvar self__4628__auto__ = this;\nreturn self__4628__auto__.cljs$core$IFn$_invoke$arity$variadic(G__22497,seq22496__$1);\n});\n\nreagent.impl.template.vec_to_elem = (function reagent$impl$template$vec_to_elem(v){\nwhile(true){\nif((cljs.core.count(v) > (0))){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Hiccup form should not be empty\"], 0))),\"\\n\",\"(pos? (count v))\"].join('')));\n}\n\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(0),null);\nif(reagent.impl.template.valid_tag_QMARK_(tag)){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid Hiccup form\"], 0))),\"\\n\",\"(valid-tag? tag)\"].join('')));\n}\n\nif(cljs.core.keyword_identical_QMARK_(new cljs.core.Keyword(null,\"<>\",\"<>\",1280186386),tag)){\nreturn reagent.impl.template.fragment_element(v);\n} else {\nif(reagent.impl.template.hiccup_tag_QMARK_(tag)){\nvar n = cljs.core.name(tag);\nvar pos = n.indexOf(\">\");\nvar G__22502 = pos;\nswitch (G__22502) {\ncase (-1):\nreturn reagent.impl.template.native_element(reagent.impl.template.cached_parse(n),v,(1));\n\nbreak;\ncase (0):\nvar comp = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(v,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",n)){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid Hiccup tag\"], 0))),\"\\n\",\"(= \\\">\\\" n)\"].join('')));\n}\n\nreturn reagent.impl.template.native_element(({\"name\": comp}),v,(2));\n\nbreak;\ndefault:\nvar G__22661 = cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.cljs$core$IFn$_invoke$arity$3(n,(0),pos),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.with_meta(v,null),(0),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(n,(pos + (1))))], null),cljs.core.meta(v));\nv = G__22661;\ncontinue;\n\n}\n} else {\nif((tag instanceof reagent.impl.template.NativeWrapper)){\nreturn reagent.impl.template.native_element(tag,v,(1));\n} else {\nreturn reagent.impl.template.reag_element(tag,v);\n\n}\n}\n}\nbreak;\n}\n});\nreagent.impl.template.as_element = (function reagent$impl$template$as_element(x){\nif(reagent.impl.template.js_val_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.vector_QMARK_(x)){\nreturn reagent.impl.template.vec_to_elem(x);\n} else {\nif(cljs.core.seq_QMARK_(x)){\nreturn (reagent.impl.template.expand_seq_check.cljs$core$IFn$_invoke$arity$1 ? reagent.impl.template.expand_seq_check.cljs$core$IFn$_invoke$arity$1(x) : reagent.impl.template.expand_seq_check.call(null,x));\n\n} else {\nif(reagent.impl.template.named_QMARK_(x)){\nreturn cljs.core.name(x);\n} else {\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (2147483648))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IPrintWithWriter$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter,x))){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n} else {\nreturn x;\n\n}\n}\n}\n}\n}\n});\nreagent.impl.component.as_element = reagent.impl.template.as_element;\nreagent.impl.template.expand_seq = (function reagent$impl$template$expand_seq(s){\nvar a = cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(s);\nvar n__4518__auto___22685 = a.length;\nvar i_22686 = (0);\nwhile(true){\nif((i_22686 < n__4518__auto___22685)){\n(a[i_22686] = reagent.impl.template.as_element((a[i_22686])));\n\nvar G__22687 = (i_22686 + (1));\ni_22686 = G__22687;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn a;\n});\nreagent.impl.template.expand_seq_dev = (function reagent$impl$template$expand_seq_dev(s,o){\nvar a = cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(s);\nvar n__4518__auto___22689 = a.length;\nvar i_22691 = (0);\nwhile(true){\nif((i_22691 < n__4518__auto___22689)){\nvar val_22693 = (a[i_22691]);\nif(((cljs.core.vector_QMARK_(val_22693)) && ((reagent.impl.template.key_from_vec(val_22693) == null)))){\n(o[\"no-key\"] = true);\n} else {\n}\n\n(a[i_22691] = reagent.impl.template.as_element(val_22693));\n\nvar G__22694 = (i_22691 + (1));\ni_22691 = G__22694;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn a;\n});\nreagent.impl.template.expand_seq_check = (function reagent$impl$template$expand_seq_check(x){\nvar ctx = ({});\nvar vec__22557 = reagent.ratom.check_derefs(((function (ctx){\nreturn (function (){\nreturn reagent.impl.template.expand_seq_dev(x,ctx);\n});})(ctx))\n);\nvar res = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22557,(0),null);\nvar derefed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__22557,(1),null);\nif(cljs.core.truth_(derefed)){\nif(reagent.debug.has_console){\n((reagent.debug.tracking)?reagent.debug.track_console:console).warn([\"Warning: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(x,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Reactive deref not supported in lazy seq, \",\"it should be wrapped in doall\"], 0)))].join(''));\n} else {\n}\n} else {\n}\n\nif(cljs.core.truth_((ctx[\"no-key\"]))){\nif(reagent.debug.has_console){\n((reagent.debug.tracking)?reagent.debug.track_console:console).warn([\"Warning: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic(x,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Every element in a seq should have a unique :key\"], 0)))].join(''));\n} else {\n}\n} else {\n}\n\nreturn res;\n});\nreagent.impl.template.make_element = (function reagent$impl$template$make_element(argv,comp,jsprops,first_child){\nvar G__22565 = (cljs.core.count(argv) - first_child);\nswitch (G__22565) {\ncase (0):\nreturn module$node_modules$react$index.createElement(comp,jsprops);\n\nbreak;\ncase (1):\nvar G__22567 = comp;\nvar G__22568 = jsprops;\nvar G__22569 = reagent.impl.template.as_element(cljs.core.nth.cljs$core$IFn$_invoke$arity$3(argv,first_child,null));\nreturn module$node_modules$react$index.createElement(G__22567,G__22568,G__22569);\n\nbreak;\ndefault:\nreturn module$node_modules$react$index.createElement.apply(null,cljs.core.reduce_kv((function (a,k,v){\nif((k >= first_child)){\na.push(reagent.impl.template.as_element(v));\n} else {\n}\n\nreturn a;\n}),[comp,jsprops],argv));\n\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/impl/template.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$$","~$reagent.interop","~$$!","^C","~$dbg","~$reagent.debug","~$prn","^F","~$println","^F","~$log","^F","~$dev?","^F","~$warn","^F","~$warn-unless","^F"],"~:excludes",["~#set",[]],"~:name","~$reagent.impl.template","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.impl.util","^U","~$comp","~$reagent.impl.component","^C","^C","~$reagent.ratom","^X","^<","^=","~$cljs.core","^Y","^=","^=","~$goog","^Z","~$reagent.impl.batching","^[","^W","^W","~$util","^U","~$ratom","^X","~$string","~$clojure.string","~$batch","^[","^F","^F","^13","^13","~$clojure.walk","^15"],"~:seen",["^N",["~:require"]],"~:uses",["^ ","~$prewalk","^15","~$is-client","^U"],"~:require-macros",["^ ","^C","^C","^F","^F","^Y","^Y","^X","^X","^11","^X"],"~:form",["~#list",["~$ns","^P",["^1=",["^17",["^<","~:as","^<"],["^13","^1?","^12"],["^15","~:refer",["^19"]],["^U","^1?","^10","^1@",["^1:"]],["^W","^1?","^V"],["^[","^1?","^14"],["^X","^1?","^11"],["^C","~:refer-macros",["~$$","^D"]],["^F","^1A",["^E","^G","^H","^I","^J","^K","^L"]]]]]],"~:flags",["^ ","^17",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^=","^13","^15","^U","^W","^[","^X","^C","^F"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","reagent/impl/template.cljs"],"~:compiled-at",1547237660281,"~:resource-name","reagent/impl/template.cljs","~:warnings",[],"~:source","(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset custom-prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" (if (named? old-class)\n                                                                  (name old-class)\n                                                                  old-class))))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (keep (fn [c]\n                 (if c\n                   (if (named? c)\n                     (name c)\n                     c))))\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          ;; TODO: Doesn't this match :>foo or any keyword starting with >\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;;;;;;;AAYA,AAAA,AAGA;;;;AAAA,AAEEA;AAEF,AAAA;;;;;;AAAA;AAAA,AAAA,AAAA,AAASG;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAASA;AAAT,AAAA,AAAAF,AAAAC,AAAA;;;AAAA;;;AAAA,AAASE;AAAT,AAAA,AAAAD;;;AAASA,AAKT,AAAA,AAAeE,AAAQ;AAAvB,AACE,AAAI,AAAAC,AAAUC,AACV,AAAAC,AAASD;;AAEf,AAAA,AAAeE,AAAa;AAA5B,AACE,AAAI,AAACJ,AAAOE,AACR,AAASA;;AAEf,AAAA,AAAeG,AAAY;AAA3B,AACE,AAAI,AAACD,AAAYF,AACb,AAACI,AAAKJ,AACN,AAAWJ,AAAcI;;AAK/B,AAAA,AAAA,AAAA,AAAA,AAAKK;AAIL,AAAA,AAAMC,AAAW,AAAE;AAAnB,AACE,AAAM,AAA0BC,AAAEC;AAAlC,AACE,AAAMD,AAAEC;;AADV;;;AAGF,AAAA,AAAMC,AAAkB;AAAxB,AACE,AAAI,AAACX,AAAOU;AACV,AAAA,AAAa,AAACF,AAAUD,AAAgB,AAACM,AAAKH;AAA9C,AAAA,AAAA,AAAAE,AAAA;AAEE,AAAML,AAAgB,AAACM,AAAKH,AACtB,AAACK,AAAmBL;;AAH5B,AAAAE,AAAU;AAAV,AACEE;;;AAGFJ;;;AAEJ,AAAA,AAAeM,AAAS;AAAxB,AACE,AAAK,AAAA,AAAqB,AAACC,AAAYf;;AAEzC,AAAA,AAEA,AAAA,AAAMgB,AAAS,AAAE,AAAE;AAAnB,AACE,AAAA,AAAMT;AAAN,AAAA,AAAAU,AACQ,AAACR,AAAiBD,AAClB,AAACU,AAAAA,AAAAA,AAAmBC,AAAAA;;AAF5BF;;AAIF,AAAA,AAAMC,AAAoB;AAA1B,AACE,AAAM,AAACJ,AAAQd;AAAGA;;AAAlB,AACM,AAACF,AAAOE;AAAG,AAACW,AAAKX;;AADvB,AAEM,AAACoB,AAAKpB;AAAG,AAAA,AAACqB,AAAUL,AAAchB;;AAFxC,AAGM,AAACsB,AAAMtB;AAAG,AAACuB,AAAQvB;;AAHzB,AAIM,AAACI,AAAKJ;AAAG;AAAO;AAAP,AACE,AAACwB,AAAMxB,AAAEyB;;;AADJ;;;;AAAA;;AAAA;;;AAAA;AAAA;;;;;;;AAJtB,AAMY,AAACF,AAAQvB;;;;;;;;AAKvB,AAAA,AAAK0B;AAEL,AAAA,AAAMC,AAAyB;AAA/B,AACE,AAAI,AAAC7B,AAAOU;AACV,AAAA,AAAa,AAACF,AAAUoB,AAAuB,AAACf,AAAKH;AAArD,AAAA,AAAA,AAAAE,AAAA;AAEE,AAAMgB,AAAuB,AAACf,AAAKH,AAC7B,AAACK,AAAmBL;;AAH5B,AAAAE,AAAU;AAAV,AACEE;;;AAGFJ;;;AAEJ,AAAA,AAAMoB,AAAgB,AAAE,AAAE;AAA1B,AACE,AAAA,AAAMrB;AAAN,AAAA,AAAAsB,AACQ,AAACF,AAAwBnB,AACzB,AAACU,AAAmBC;;AAF5BU;;AAIF,AAAA,AAAMC,AAA2B;AAAjC,AACE,AAAM,AAAChB,AAAQd;AAAGA;;AAAlB,AACM,AAACF,AAAOE;AAAG,AAACW,AAAKX;;AADvB,AAEM,AAACoB,AAAKpB;AAAG,AAAA,AAACqB,AAAUO,AAAqB5B;;AAF/C,AAGM,AAACsB,AAAMtB;AAAG,AAACuB,AAAQvB;;AAHzB,AAIM,AAACI,AAAKJ;AAAG;AAAO;AAAP,AACE,AAACwB,AAAMxB,AAAEyB;;;AADJ;;;;AAAA;;AAAA;;;AAAA;AAAA;;;;;;;AAJtB,AAMY,AAACF,AAAQvB;;;;;;;;AAEvB,AAAA,AAAM+B,AAAM,AAAE,AAAE;AAAhB,AACE,AAAA,AAAM,AAAA,AAAI,AAAA,AAAMxB,AAASA;AAAzB,AAAA,AAAAyB,AACQxB,AAAEW;;AADVa;;AAGF,AAAA,AAAMC,AAAM,AAAE;AAAd,AACE,AAAI,AAAA,AAAM1B;AAAV;;AAAiB,AAAMA,AAAEC;;;AAE3B;;;;AAAA,AAAM0B,AAGH,AAAM;AAHT,AAIE,AAAM,AAAG,AAAA,AAAGC;AACN,AAAM,AAAA,AAAGA;AADf,AAEE,AAAA,AAAQE;AAAR,AAAA,AAAAD,AAEE,AAAK,AAAA,AAAA,AAAOE,AACP,AAAA,AAAM,AAAA,AAAKD,AAChB,AAAAD,AAAA,AAACG,AAAUD;AAJb,AAAA,AAOEE;AACA,AAAAJ,AAAA,AAACG,AAAa,AAAM,AAAU,AAAA,AAAQF;AAAxB,AACE,AAAI,AAAA,AAAMI;AAAWD;;AAAM,AAAA,AAAKA,AAAU,AAAI,AAAC1C,AAAO2C,AACV,AAAC9B,AAAK8B,AACNA;;;;AAX9DL;;;AAaJ,AAAA,AAAA,AAAMW;AAAN,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAqB,AAAAF,AAAAA;AAAAA,AAA0C;AAA1C,AAAAG,AAAAH,AAAA,AAA+B;AAA/B,AACE,AAAI,AAACrB,AAAMkB;AAEJ,AAACQ,AAAK,AAKN,AAAA,AAACE,AACD,AAAA,AAACX,AAAMF;AANI;AAAL,AACE,AAAIY;AACF,AAAI,AAACnD,AAAOmD;AACV,AAACtC,AAAKsC;;AACNA;;;AAHJ;;;AAFRT;;AAQLH;;;AAEJ,AAAA,AAAMc,AAAe,AAAM;AAA3B,AACE,AAAM,AAAUd,AACAU,AACA,AAAA,AAACb,AAAaC;AAF9B,AAGE,AAAI,AAAA,AAAGA;AACL,AAACL,AAA0BO;;AAC3B,AAACnB,AAAmBmB;;;AAK1B,AAAA,AAAAe,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAASC;;AAKT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAGL,AAAA,AAAeC,AACZ;AADH,AAEE,AAACC,AAAUF,AAAgCG;;AAE7C,AAAA,AAEA,AAAA,AAAA,AAAMG,AACH,AAAK,AAAe,AAAU;AADjC,AAAA,AAAA,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAqB,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AACmD;AADnD,AAEE,AAAA,AAAQ,AAAK,AAAYE,AAAK,AAAA,AAAGC,AACvB,AAACP,AAAmB,AAAA,AAAGM,AACvB,AAASE,AACT,AAASC;AAEjB,AACE,AAAA,AAAIC,AAAwBF;;AAC5B,AAAA,AAAIF,AAAYE;;AAChB,AAAM,AAACG,AAAIC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAASJ,AAAAA;;AADZ;;;AAwBF,AAAM,AAAW,AAAA,AAAGF;AAApB,AACE,AAAI,AAACO,AAAKC,AAAWL;AAEnB,AAAA,AAACM;;AAAD,AAAwB,AAACC,AAAAA,AAAAA,AAA0BN,AAAAA;;;;AACnD,AAAM,AAAyB,AAAG,AAACO,AAAMH,AACR,AAAA,AAAGR;AAC9B,AAAyB,AAAG,AAACW,AAAMT,AACRU;AAHjC,AAIE,AAAA,AAAIR,AAAwBF;;AAC5B,AAAA,AAAIF,AAAYE;;AAChB,AAAM,AAACG,AAAIC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAASJ,AAAAA;;AADZ;;AAEA,AAAA,AAAIF,AAAqBa;;AACzB,AAAA,AAAIb,AAAmBa;;;;AAEjC,AAAA,AAAMH,AAA2B;AAAjC,AACE,AAAM,AAAA,AAAGI;AAAT,AACE,AAAA,AAAA,AAAIA;;AACJ,AAAM,AAAe,AAAA,AAAGA;AAClB,AAAU,AAAA,AAAGA;AAEb,AAAK,AAACtB,AAAAA,AAAAA,AAAcsB,AAAAA;AAH1B,AAIE,AAAM,AAACP,AAAKL,AAAeC;AAA3B,AACE,AAAA,AAACJ,AAAqBC,AAAKE,AAAeC,AAAUW;;AADtD;;;AANJ;;;AASF,AAAA,AAAMC,AAAqB,AAAK,AAAU;AAA1C,AACE,AAAA,AAAID,AAAmB,AAAA,AAAIE;;AAG3B,AAAU,AAAA,AAAGF;AAAb;AAAA,AACE,AAAA,AAAA,AAAIA;;AACJ,AAAA,AAACL;AAAD,AAAwB,AAACC,AAA0BI;;;;AACrD,AAACG,AAAAA,AAAAA,AAAUD,AAAAA;;AAEb,AAAA,AAAME,AACH,AAAK;AADR,AAIE,AAAM,AAAA,AAAK,AAAA,AAAA,AAAOE;AAAZ,AAAA,AAAAD;AAAA,AAAA,AACK,AAAA,AAAiBC;AADtB,AAAA,AAAAD;AAEK,AAAA,AAAiBC;;AAFtBD;;;AAAAA;;;AAAN,AAGE,AAAQ3B;AAAR;AAAA,AAAA,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAEA,AAAM,AAAE,AAAA,AAAGD;AACL,AAAM,AAAA,AAAI,AAAA,AAAMjE,AAAMA;AACtB,AAAU,AAAA,AAAGiE;AAFnB,AAGE,AAAU,AAAA,AAAGN;AAAb;AAAA,AAEE,AAAA,AAAA,AAAIA;;AACJ,AAAA,AAAIA,AAAmBQ;;;AACzB,AAAA,AAAIR,AAAwBQ;;AAC5B,AAAA,AAAWF;;AACX,AAAA,AAAMA;AAAN,AAAA,AAAAG,AAAA,AACoBD;;AADpB,AAAAC,AAAA,AAAA;AAAA;AAAA,AAEiB,AAAAC,AAACT,AAAoBD,AAAKG;;;;AAF3CM;;AAdJ;;;AAkBF,AAAA,AAAME,AAAe;AAArB,AACE,AAAA,AAAA,AAAIX;;AAEN,AAAA,AAAeY,AAAkB;AAAjC,AACE,AAAA,AAAM1F;AAAN,AAAA,AAAA2F;AAAA;AAAA;AAAA;;;;AAAA;;;;AAIF,AAAA,AAAKC;AAEL,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAEoBnB,AACEe,AAExB,AAAK,AAAK,AAAK,AAAQ;AAAvB,AACE,AAAM,AAAKK;AAAX,AACE,AAACZ,AAAmBJ,AAAKM;;AACzB,AAACW,AAAAA,AAAAA,AAAaC,AAAAA,AAAKC,AAAAA,AAAKb,AAAAA,AAAQc,AAAAA;;AAEvC,AAAA,AAAMC;AAAN,AAEE,AAAM,AAAA,AAAMP;AAAZ,AACE,AAAMA,AAAoB,AAACQ,AAAkBP;;AAD/C;;AAEAD;;AAKF,AAAA,AAAMS,AAAW;AAAjB,AACE,AAAA,AAAqB,AAAKG,AAAW7F,AAAK,AAAA,AAAC8F,AAAWhH,AAAQiH;AAA9D,AAAAJ,AAAAC,AAAA,AAAA,AAAO;AAAP,AAAAD,AAAAC,AAAA,AAAA,AAAW;AAAX,AAAAD,AAAAC,AAAA,AAAA,AAAc;AACR,AAAM,AAAA,AAAA,AAAU,AAAA,AAAM/D,AACd,AAAA,AAAA,AAACmE,AAAenE;AAF9B,AAGE,AAAQoE;AAAR;AAAA,AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAA,AAAY,AAAA,AAAA,AAAsBmB,AACjB,AAACK;;;AAJpB,AAKaD,AACFtE,AACGE,AAGC,AAAA,AAAC+B,AAAQ,AAAA,AAAUqC;;AAEpC,AAAA,AAAME,AAAa;AAAnB,AAGE,AAAA,AAAK,AAAA,AAAChE,AAAI9C;AAAV,AAAA+G,AACqB;AADrB,AAAA;;AAGF,AAAA,AAAMC,AAAS;AAAf,AACE,AAAM,AAAC5F,AAAKpB;AAAZ,AACE,AAAC8G,AAAY9G;;AADf;;;AAGF,AAAA,AAAMiH,AAAc;AAApB,AACE,AAAA,AAAY,AAAI,AAACC,AAAK/F,AAAG6F;AAAzB,AAAA,AAAA,AAAAtG,AAAA;AAEE,AAAIS,AAAE,AAAA,AAAA,AAACmF,AAAWU;;AAFpB,AAAAtG,AAAU;AAAV,AACEF;;;AAGJ,AAAA,AAAM2G,AAAc,AAAI;AAAxB,AACE,AAAM,AAAE,AAACC,AAAcR;AAAvB,AACM,AAAkBzF;AADxB,AAEE,AAAA,AAAgB,AAAC8F,AAAa9F;AAA9B,AAAA,AAAA,AAAAkG,AAAA;AAAA;AAAA,AAAAA,AAAY;AAAZ,AACE,AAAA,AAAIjC,AAAakC;;;AACnB,AAACC,AAAoBtE,AAAEmC;;AAE3B,AAAA,AAAMoC,AAAkB;AAAxB,AACE,AAAM,AAAM,AAAA,AAAA,AAAClB,AAAIN;AACX,AAAS,AAAI,AAAA,AAAM3D,AAAO,AAACjB,AAAKiB;AAChC,AAAQ,AAACnB,AAAmB,AAAA,AAAIuG,AAASpF;AACzC,AAAY,AAAA,AAAK,AAAA,AAAA,AAAIoF;AAH3B,AAIE,AAAA,AAAgB,AAACR,AAAajB;AAA9B,AAAA,AAAA,AAAAqB,AAAA;AAAA;AAAA,AAAAA,AAAY;AAAZ,AACE,AAAA,AAACtF,AAAKqD,AAAckC;;;AACtB,AAACvB,AAAAA,AAAAA,AAAaC,AAAAA,AAAK0B,AAAAA,AAAetC,AAAAA,AAAQc,AAAAA;;AAE9C,AAAA,AAAMyB,AACH;AADH,AAEE,AAAA,AAAM,AAAC9H;AAAP,AAAA,AAAA+H,AAAA,AACY3E;;AADZ,AAAA2E,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;;AAKF,AAAA,AAAKC;AAEL,AAAA,AAAMC,AAAc;AAApB,AACE,AAAA,AAAY,AAACxH,AAAUuH,AAAe7H;AAAtC,AAAA,AAAA,AAAAU,AAAA;AAEE,AAAMmH,AAAe7H,AAAE,AAACqG,AAAUrG;;AAFpC,AAAAU,AAAU;AAAV,AACEqH;;;AAGJ,AAAA,AAAMC,AAAgB,AAAO,AAAK;AAAlC,AACE,AAAM,AAAK,AAAA,AAAGC;AAAd,AACE,AAAM,AAAM,AAAA,AAAC3B,AAAIN,AAAKkC;AAChB,AAAS,AAAI,AAAA,AAAM7F,AAAO,AAACjB,AAAKiB;AAChC,AAAQ,AAACc,AAAc,AAAA,AAAIsE,AAASpF,AAAO4F;AAC3C,AAAY,AAAGC,AAAM,AAAA,AAAA,AAAIT;AAH/B,AAIE,AAAI,AAAC/B,AAAiBO;AACpB,AAAA,AAAK,AAACE,AAAeH,AAAKC,AAAKb,AAAQc,AACnC,AAAA,AAACkC,AAAU,AAAClB,AAAKlB;AADrB,AAAA,AAAAmC,AAAAA,AAEIE,AAAAA,AAAAA;;AACJ,AAAM,AAAI,AAAI,AAACnB,AAAKlB,AAAMgB;AACpB,AAAE,AAAI,AAAA,AAAMM,AACRlC,AACA,AAAA,AAACrD,AAAKqD,AAAckC;AAH9B,AAIE,AAACvB,AAAAA,AAAAA,AAAaC,AAAAA,AAAKC,AAAAA,AAAKqC,AAAAA,AAAEpC,AAAAA;;;AAEpC,AAAA,AAAMqC,AAAU;AAAhB,AACE,AACE,AAAK,AAACC,AAAQ,AAAK;AAAL,AACE,AAAI,AAACnE,AAAIrE;AACP,AAAM,AAAE,AAACyI,AAAczI;AAAvB,AACE,AAAA,AAAM2I;AAAN,AAAA,AAAAD;AAAA;AAAW1I;;;;AAAE,AAAC4I,AAAOD;;;;AACvB3I;;AAAI6I;;;AAG1B,AAAA,AAAA,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAkB,AAAI;AAAtB,AACE,AAAA,AAAA,AAAK,AAAC1H,AAAMgI,AAAIC,AAAU,AAAClB,AAASpH,AAAQ,AAAC0F;;;AAD/C,AAAA,AAAAqC,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAA3C,AAAA2C;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAC,AAAAF;;;AAAA,AAGA,AAAA,AAAMK,AAAa;;AAAnB,AACE,AAAQ,AAAA,AAAM,AAAC/E,AAAMxD;AAArB;AAAA,AAAA,AAAA,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAyB,AAAA,AAACsE,AAAWxI;;;AACrC,AAAM,AAAI,AAAA,AAAA,AAACmF,AAAInF;AAAf,AACE,AAAQ,AAAChB,AAAWyG;AAApB;AAAA,AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAA,AAAA,AAAyB,AAAA,AAACsE,AAAWxI;;;AACrC,AACE,AAAA,AAACyI,AAAuBhD;AACxB,AAACY,AAAiBrG;;AAFpB,AAIE,AAACjB,AAAY0G;AACb,AAAM,AAAE,AAACjG,AAAKiG;AACR,AAAI,AAAA,AAAU+B;AADpB,AAEE,AAAA,AAAMmB;AAAN,AAAA,AAAAD;AAAA;AACK,AAAA,AAAC7B,AAAe,AAACF,AAAaa,AAAGxH;;;AADtC;AAGI,AAAM,AAAK,AAAA,AAAA,AAACmF,AAAInF;AAAhB,AAEE,AAAQ,AAAA,AAAC4I,AAAMpB;AAAf;AAAA,AAAA,AAAA,AAAAtD,AAAA,AAAA,AAAA,AAAA,AAAkB,AAAA,AAACsE,AAAWxI;;;AAC9B,AAAA,AAAA,AAAC6G,AAAyB/B,AAAM9E;;;;AAKpC,AAAO,AAAA,AAACiH,AAAW,AAAA,AAAC4B,AAAKrB,AAAImB,AACV,AAAA,AAACvH,AAAM,AAAA,AAAC6F,AAAUjH,AAAS,AAAC8I,AAAKtB,AAAE,AAAA,AAAKmB,AACzC,AAAC5C,AAAK/F;;;;;;AApB9B,AAsBE,AAAWvB,AAAcgH;AACzB,AAAA,AAACoB,AAAepB,AAAIzF;;AAvBtB,AAyBQ,AAACgG,AAAaP,AAAIzF;;;;;;;;AAE9B,AAAA,AACA,AAAA,AAEA,AAAA,AAAMkH,AAAY;AAAlB,AACE,AAAM,AAACvH,AAAQd;AAAGA;;AAAlB,AACM,AAACkK,AAAQlK;AAAG,AAAC0J,AAAY1J;;AAD/B,AAEM,AAACmK,AAAKnK;AAAG,AACE,AAACoK,AAAAA,AAAAA,AAAiBpK,AAAAA;;;AAHnC,AAKM,AAACF,AAAOE;AAAG,AAACW,AAAKX;;AALvB,AAMM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA4C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyH,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAiBtK,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AAAG,AAACuK,AAAOvK;;AAN9C,AAOYA;;;;;;;;AAEd,AAAMwK,AAAgBnC;AAEtB,AAAA,AAAMoC,AAAY;AAAlB,AACE,AAAM,AAAE,AAACC,AAAW3C;AAApB,AACE,AAAA,AAAY,AAAS8C;AAArB,AAAA,AAAA,AAAU;;AAAV,AAAA,AAAA,AAAAF,AAAUC;AAAV,AACE,AAAMC,AAAED,AAAE,AAACvC,AAAW,AAAMwC,AAAED;;AADhC,AAAA,AAAA,AAAUA;;;;AAAV;;;;AAEAC;;AAEJ,AAAA,AAAMC,AAAgB,AAAE;AAAxB,AACE,AAAM,AAAE,AAACJ,AAAW3C;AAApB,AACE,AAAA,AAAY,AAAS8C;AAArB,AAAA,AAAA,AAAU;;AAAV,AAAA,AAAA,AAAAF,AAAUC;AAAV,AACE,AAAM,AAAI,AAAMC,AAAED;AAAlB,AACE,AAAM,AAAK,AAACV,AAAQa,AACT,AAAA,AAAM,AAAC9D,AAAa8D;AAD/B,AAEE,AAAA,AAAA,AAAIxK;;AAFN;;AAGA,AAAMsK,AAAED,AAAE,AAACvC,AAAW0C;;AAL1B,AAAA,AAAA,AAAUH;;;;AAAV;;;;AAMAC;;AAEJ,AAAA,AAAMT,AAAkB;AAAxB,AACE,AAAA,AAAM;AAAN,AACoB,AAAA,AAACa;;AAAD,AAAqB,AAACH,AAAe9K,AAAEkL;;;AAD3D,AAAA5E,AAAA0E,AAAA,AAAA,AACO;AADP,AAAA1E,AAAA0E,AAAA,AAAA,AACW;AADX,AAEE,AAAMG;AAAN,AACE,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAM,AAAA,AAAA,AAAC5B,AAAW3J;;AAAlB;;AADF;;AAGA,AAAM,AAAA,AAAGkL;AAAT,AACE,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAM,AAAA,AAAC5B,AAAW3J;;AAAlB;;AADF;;AAEAwL;;AA6BJ,AAAA,AAAMzF,AAAc,AAAK,AAAK,AAAQ;AAAtC,AACE,AAAA,AAAM,AAAG,AAACpB,AAAMqB,AAAME;AAAtB,AAAA,AAAAuF;AAAA;AAEI,AAAClE,AAAoBtB,AAAKb;;;AAF9B;AAII,AAAA,AAAqBa;AAArB,AAA0Bb;AAA1B,AACI,AAACiD,AAAW,AAAA,AAAC/B,AAAIN,AAAKE;AAD1B,AAAA,AAAAwF,AAAAC,AAAAC,AAACrE;;;;AAGH,AAAA,AAAQA,AACA,AAAClG,AAAU,AAAK,AAAE,AAAE;AAAT,AACE,AAAM,AAAIb,AAAE0F;AAAZ,AACE,AAAO2E,AAAE,AAACxC,AAAWlH;;AADvB;;AAEA0J;AAHb,AAIe5E,AAAKb,AAASY","names",["reagent.impl.template/re-tag","cljs.core/-write","writer__4291__auto__","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","reagent.impl.template/named?","cljs.core/Keyword","x","cljs.core/Symbol","reagent.impl.template/hiccup-tag?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template/cached-prop-name","temp__5459__auto__","cljs.core/name","k'","reagent.impl.util/dash-to-camel","reagent.impl.template/js-val?","goog/typeOf","reagent.impl.template/kv-conv","G__22339","reagent.impl.template/convert-prop-value","v","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__22370","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/oset","G__22371","reagent.impl.template/oget","reagent.impl.template/set-id-class","id-class","G__22376","props","id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","class","old-class","p__22412","map__22413","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/stringify-class","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","c","clojure.string.join.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/convert-props","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/has-selection-api?","cljs.core/contains?","input-type","p__22443","map__22448","reagent.impl.template/input-node-set-value","node","js/document","rendered-value","dom-value","component","cljs.core/fn?","on-write","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","node-value","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","cljs.core/count","existing-offset-from-end","new-cursor-offset","this","reagent.impl.template/input-handle-change","e","on-change","reagent.impl.template/input-render-setup","and__4036__auto__","jsprops","js/Error","value","G__22477","p1__22474#","reagent.impl.template/input-unmount","reagent.impl.template/input-component?","G__22480","reagent.impl.template/reagent-input-class","reagent.impl.template/input-spec","reagent.impl.component/*current-component*","reagent.impl.template/make-element","argv","comp","first-child","reagent.impl.template/reagent-input","reagent.impl.component/create-class","reagent.impl.template/parse-tag","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__22484","hiccup-tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","tag","reagent.impl.component/comp-name","reagent.impl.template/try-get-key","e22492","reagent.impl.template/get-key","reagent.impl.template/key-from-vec","cljs.core/meta","reagent.impl.template/reag-element","reagent.impl.component/as-class","temp__5461__auto__","key","js/module$node_modules$react$index.createElement","reagent.impl.template/fragment-element","hasprops","js/module$node_modules$react$index.Fragment","reagent.impl.template/adapt-react-class","G__22493","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","G__22494","cljs.core/with-meta","reagent.impl.template/as-element","p","reagent.impl.template/str-coll","clojure.walk/prewalk","reagent.impl.util/fun-name","G__22495","n","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","coll","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","argseq__4648__auto__","cljs.core/first","seq22496","self__4628__auto__","G__22497","cljs.core/str","msg","reagent.impl.template/vec-to-elem","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keyword-identical?","G__22502","pos","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/as-element","reagent.impl.template/expand-seq","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4518__auto__","i","a","reagent.impl.template/expand-seq-dev","val","vec__22557","reagent.ratom/check-derefs","ctx","derefed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","res","G__22565","G__22567","G__22568","G__22569"]]],"~:cache-keys",["~#cmap",[["^1F","reagent/impl/batching.cljs"],[1547237504940,"^Z","^Y","^F","^C","^U","^13"],["~:macro","^Y"],[1547237500000],["^1F","goog/math/math.js"],[1547237499888,"^Z","~$goog.array","~$goog.asserts"],["^1S","^F"],[1547237504000],["^1F","goog/array/array.js"],[1547237499888,"^Z","^1U"],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1547237503000,1547234033623,"~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1F","reagent/impl/util.cljs"],[1547237504940,"^Z","^Y","^F","^C","^13"],["^1V","node_modules/fbjs/lib/emptyFunction.js"],[1547237503000,1547234033599,"^1W"],["^1F","goog/debug/error.js"],[1547237499888,"^Z"],["^1V","node_modules/fbjs/lib/emptyObject.js"],[1547237503000,1547234033599,"^1W"],["^1F","goog/dom/nodetype.js"],[1547237499888,"^Z"],["^1F","reagent/ratom.cljs"],[1547237504940,"^Z","^Y","^U","^F","^[","~$clojure.set"],["^1V","node_modules/create-react-class/factory.js"],[1547237503000,1547234033595,"^1W","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"],["^1V","node_modules/react/index.js"],[1547237503000,1547234033635,"^1W","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1F","shadow/js.js"],[1547237503656,"^Z"],["^1F","goog/object/object.js"],[1547237499888,"^Z"],["^1F","reagent/impl/template.cljs"],[1547237504940,"^Z","^Y","^=","^13","^15","^U","^W","^[","^X","^C","^F"],"~:SHADOW-TIMESTAMP",[1547237503000,1547237500000],["^1V","node_modules/react/cjs/react.development.js"],[1547237503000,1547234033635,"^1W","^1Z","~$module$node_modules$prop_types$checkPropTypes"],["^1S","^X"],[1547237504000],["^1F","goog/math/long.js"],[1547237499888,"^Z","^1U","~$goog.reflect"],["^1S","^C"],[1547237504000],["^1V","node_modules/fbjs/lib/warning.js"],[1547237503000,1547234033603,"^1W","~$module$node_modules$fbjs$lib$emptyFunction"],["^1F","goog/functions/functions.js"],[1547237499888,"^Z"],["^1F","reagent/impl/component.cljs"],[1547237504940,"^Z","^Y","^?","^=","^U","^[","^X","^C","^F"],["^1F","clojure/walk.cljs"],[1547237500020,"^Z","^Y"],["^1F","goog/structs/map.js"],[1547237499888,"^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^1F","goog/asserts/asserts.js"],[1547237499888,"^Z","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^1F","goog/uri/uri.js"],[1547237499888,"^Z","^1T","^1U","^2=","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1V","node_modules/object-assign/index.js"],[1547237503000,1547234033619,"^1W"],["^1F","goog/base.js"],[1547237499888],["^1F","goog/structs/structs.js"],[1547237499888,"^Z","^1T","^2:"],["^1F","clojure/string.cljs"],[1547237500020,"^Z","^Y","^2=","~$goog.string.StringBuffer"],["^1V","node_modules/create-react-class/index.js"],[1547237503000,1547234033595,"^1W","^=","~$module$node_modules$create_react_class$factory"],["^1V","node_modules/react/cjs/react.production.min.js"],[1547237503000,1547234033635,"^1W","^1Z"],["^1F","goog/string/string.js"],[1547237499888,"^Z"],["^1F","goog/reflect/reflect.js"],[1547237499888,"^Z"],["^1F","goog/string/stringbuffer.js"],[1547237499888,"^Z"],["^1F","goog/iter/iter.js"],[1547237499888,"^Z","^1T","^1U","~$goog.functions","~$goog.math"],["^1V","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1547237503000,1547234033623,"^1W"],["^1F","reagent/interop.cljs"],[1547237504940,"^Z","^Y"],["^1F","cljs/core.cljs"],[1547237500020,"~$goog.math.Long","~$goog.math.Integer","^2=","^2:","^1T","~$goog.Uri","^2C"],["^1F","reagent/debug.cljs"],[1547237504940,"^Z","^Y"],["^1F","goog/math/integer.js"],[1547237499888,"^Z"],["^1F","clojure/set.cljs"],[1547237500020,"^Z","^Y"],["^1F","goog/uri/utils.js"],[1547237499888,"^Z","^1T","^1U","^2="],["^1V","node_modules/fbjs/lib/invariant.js"],[1547237503000,1547234033603,"^1W"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/impl/template.cljs","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","~$$","^C","^D","^C","^E","^F","^G","^F","^H","^F","^I","^F","^J","^F","^K","^F","^L","^F"],"^M",["^N",[]],"~:shadow/js-access-properties",["^N",["createElement","Fragment"]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^W","^C","^C","^X","^X","^<","^=","^Y","^Y","^=","^=","^Z","^Z","^[","^[","^W","^W","^10","^U","^11","^X","^12","^13","^14","^[","^F","^F","^13","^13","^15","^15"],"^16",["^N",["^17"]],"~:shadow/js-access-global",["^N",["document","Error"]],"^18",["^ ","^19","^15","^1:","^U"],"~:defs",["^ ","~$valid-tag?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",33,"^8",16,"^9",33,"^:",26,"~:tag","~$boolean","~:arglists",["^1=",["~$quote",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/valid-tag?","^6","reagent/impl/template.cljs","^:",26,"~:method-params",["^1=",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1=",[null,null]],"^8",1,"~:variadic?",false,"^7",33,"~:ret-tag","^2Q","^9",33,"~:max-fixed-arity",1,"^2P","^2Q","~:fn-var",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$adapt-react-class",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",331,"^8",7,"^9",331,"^:",24,"^2R",["^1=",["^2S",["^1=",[["~$c"]]]]]],"^O","~$reagent.impl.template/adapt-react-class","^6","reagent/impl/template.cljs","^:",24,"^2U",["^1=",[["~$c"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",331,"^2Y","~$reagent.impl.template/NativeWrapper","^9",331,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$c"]]]]]],"~$has-selection-api?",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",160,"^8",16,"^9",160,"^:",34,"^2P","^2Q","^2R",["^1=",["^2S",["^1=",[["~$input-type"]]]]]],"^O","~$reagent.impl.template/has-selection-api?","^6","reagent/impl/template.cljs","^:",34,"^2U",["^1=",[["^34"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",160,"^2Y","^2Q","^9",160,"^2Z",1,"^2P","^2Q","^2[",true,"^2R",["^1=",["^2S",["^1=",[["^34"]]]]]],"~$str-coll",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",361,"^8",7,"^9",361,"^:",15,"^2R",["^1=",["^2S",["^1=",[["~$coll"]]]]]],"^O","~$reagent.impl.template/str-coll","^6","reagent/impl/template.cljs","^:",15,"^2U",["^1=",[["^37"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",361,"^2Y","~$any","^9",361,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^37"]]]]]],"~$get-key",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",306,"^8",7,"^9",306,"^:",14,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/get-key","^6","reagent/impl/template.cljs","^:",14,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",306,"^2Y",["^N",["^39","~$clj-nil"]],"^9",306,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$re-tag",["^ ","^O","~$reagent.impl.template/re-tag","^6","reagent/impl/template.cljs","^7",16,"^8",1,"^9",18,"^:",9,"~:doc","Regular expression that parses a CSS-style id and class\n             from a tag name.","^5",["^ ","^6","reagent/impl/template.cljs","^7",18,"^8",3,"^9",18,"^:",9,"^3?","Regular expression that parses a CSS-style id and class\n             from a tag name."],"^2P","^39"],"~$reag-element",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",315,"^8",7,"^9",315,"^:",19,"^2R",["^1=",["^2S",["^1=",[["~$tag","~$v"]]]]]],"^O","~$reagent.impl.template/reag-element","^6","reagent/impl/template.cljs","^:",19,"^2U",["^1=",[["^3A","~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",315,"^2Y","~$js","^9",315,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^3A","~$v"]]]]]],"~$as-element",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",407,"^8",7,"^9",407,"^:",17,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/as-element","^6","reagent/impl/template.cljs","^:",17,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",407,"^2Y",["^N",[null,"^39","^3C","^12"]],"^9",407,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$input-component?",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",259,"^8",16,"^9",259,"^:",32,"^2P","^2Q","^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/input-component?","^6","reagent/impl/template.cljs","^:",32,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",259,"^2Y","^2Q","^9",259,"^2Z",1,"^2P","^2Q","^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$NativeWrapper",["^ ","~:num-fields",0,"~:protocols",["^N",[]],"^O","^32","^6","reagent/impl/template.cljs","^:",23,"~:type",true,"^8",10,"^7",20,"~:record",false,"^9",20,"^2P","~$function","~:skip-protocol-flag",null],"~$->NativeWrapper",["^ ","^2O",null,"^5",["^ ","^3J",["^N",[]],"^6","reagent/impl/template.cljs","^:",23,"^8",10,"~:factory","~:positional","^7",20,"^9",20,"^2R",["^1=",["^2S",["^1=",[[]]]]],"^3N",null,"^3?","Positional factory function for reagent.impl.template/NativeWrapper."],"^3J",["^N",[]],"^O","~$reagent.impl.template/->NativeWrapper","^6","reagent/impl/template.cljs","^:",23,"^2U",["^1=",[[]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^3P","^3Q","^7",20,"^2Y","^32","^9",20,"^2Z",0,"^2[",true,"^2R",["^1=",["^2S",["^1=",[[]]]]],"^3N",null,"^3?","Positional factory function for reagent.impl.template/NativeWrapper."],"~$custom-kv-conv",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",89,"^8",7,"^9",89,"^:",21,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"^O","~$reagent.impl.template/custom-kv-conv","^6","reagent/impl/template.cljs","^:",21,"^2U",["^1=",[["~$o","~$k","~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",89,"^9",89,"^2Z",3,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"~$input-render-setup",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",234,"^8",7,"^9",234,"^:",25,"^2R",["^1=",["^2S",["^1=",[["~$this","~$jsprops"]]]]]],"^O","~$reagent.impl.template/input-render-setup","^6","reagent/impl/template.cljs","^:",25,"^2U",["^1=",[["^3V","^3W"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",234,"^2Y",["^N",[null,"^3<"]],"^9",234,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^3V","^3W"]]]]]],"~$input-component-set-value",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",215,"^8",7,"^9",215,"^:",32,"^2R",["^1=",["^2S",["^1=",[["^3V"]]]]]],"^O","~$reagent.impl.template/input-component-set-value","^6","reagent/impl/template.cljs","^:",32,"^2U",["^1=",[["^3V"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",215,"^2Y",["^N",["^39","^3<"]],"^9",215,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^3V"]]]]]],"~$stringify-class",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",129,"^8",7,"^9",129,"^:",22,"^2R",["^1=",["^2S",["^1=",[[["^ ","~:keys",["~$class"],"^1?","~$props"]]]]]]],"^O","~$reagent.impl.template/stringify-class","^6","reagent/impl/template.cljs","^:",22,"^2U",["^1=",[["~$p__22412"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",129,"^2Y",["^N",[null,"^39"]],"^9",129,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[[["^ ","^40",["^41"],"^1?","^42"]]]]]]],"~$oset",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",103,"^8",7,"^9",103,"^:",11,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"^O","~$reagent.impl.template/oset","^6","reagent/impl/template.cljs","^:",11,"^2U",["^1=",[["~$o","~$k","~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",103,"^2Y",["^N",[null,"~$object"]],"^9",103,"^2Z",3,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"~$oget",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",107,"^8",7,"^9",107,"^:",11,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k"]]]]]],"^O","~$reagent.impl.template/oget","^6","reagent/impl/template.cljs","^:",11,"^2U",["^1=",[["~$o","~$k"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",107,"^2Y",["^N",["^39","^3<"]],"^9",107,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k"]]]]]],"~$hiccup-tag?",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",29,"^8",16,"^9",29,"^:",27,"^2P","^2Q","^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/hiccup-tag?","^6","reagent/impl/template.cljs","^:",27,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",29,"^2Y","^2Q","^9",29,"^2Z",1,"^2P","^2Q","^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$set-id-class",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",110,"^8",7,"^9",110,"^:",19,"^2R",["^1=",["^2S",["^1=",[["^42","~$id-class"]]]]],"^3?","Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties."],"^O","~$reagent.impl.template/set-id-class","^6","reagent/impl/template.cljs","^:",19,"^2U",["^1=",[["^42","^4="]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",110,"^2Y",["^N",[null,"^39"]],"^9",110,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^42","^4="]]]]],"^3?","Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties."],"~$tag-name-cache",["^ ","^O","~$reagent.impl.template/tag-name-cache","^6","reagent/impl/template.cljs","^7",338,"^8",1,"^9",338,"^:",20,"^5",["^ ","^6","reagent/impl/template.cljs","^7",338,"^8",6,"^9",338,"^:",20],"^2P","^47"],"~$prop-name-cache",["^ ","^O","~$reagent.impl.template/prop-name-cache","^6","reagent/impl/template.cljs","^7",41,"^8",1,"^9",41,"^:",21,"^5",["^ ","^6","reagent/impl/template.cljs","^7",41,"^8",6,"^9",41,"^:",21],"^2P","^47"],"~$input-node-set-value",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",166,"^8",7,"^9",166,"^:",27,"^2R",["^1=",["^2S",["^1=",[["~$node","~$rendered-value","~$dom-value","~$component",["^ ","^40",["~$on-write"]]]]]]]],"^O","~$reagent.impl.template/input-node-set-value","^6","reagent/impl/template.cljs","^:",27,"^2U",["^1=",[["^4D","^4E","^4F","^4G","~$p__22443"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",166,"^2Y",["^N",["^39","^3<"]],"^9",166,"^2Z",5,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^4D","^4E","^4F","^4G",["^ ","^40",["^4H"]]]]]]]],"~$convert-props",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",141,"^8",7,"^9",141,"^:",20,"^2R",["^1=",["^2S",["^1=",[["^42","^4="]]]]]],"^O","~$reagent.impl.template/convert-props","^6","reagent/impl/template.cljs","^:",20,"^2U",["^1=",[["^42","^4="]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",141,"^2Y",["^N",[null,"^39","^12","^3M"]],"^9",141,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^42","^4="]]]]]],"~$hiccup-err",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",370,"^8",7,"^9",370,"^:",17,"^2R",["^1=",["^2S",["^1=",[["~$v","~$&","~$msg"]]]]],"~:top-fn",["^ ","^2X",true,"^2Z",1,"^2U",[["^1=",["~$v","^4N"]]],"^2R",["^1=",[["~$v","~$&","^4N"]]],"^2W",["^1=",[null]]]],"^O","~$reagent.impl.template/hiccup-err","^6","reagent/impl/template.cljs","^:",17,"^4O",["^ ","^2X",true,"^2Z",1,"^2U",[["^1=",["~$v","^4N"]]],"^2R",["^1=",[["~$v","~$&","^4N"]]],"^2W",["^1=",[null]]],"^2U",[["^1=",["~$v","^4N"]]],"^2V",null,"^2W",["^1=",[null]],"^8",1,"^2X",true,"^7",370,"^2Y","^39","^9",370,"^2Z",1,"^2[",true,"^2R",["^1=",[["~$v","~$&","^4N"]]]],"~$custom-prop-name-cache",["^ ","^O","~$reagent.impl.template/custom-prop-name-cache","^6","reagent/impl/template.cljs","^7",79,"^8",1,"^9",79,"^:",28,"^5",["^ ","^6","reagent/impl/template.cljs","^7",79,"^8",6,"^9",79,"^:",28],"^2P","^47"],"~$named?",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",25,"^8",16,"^9",25,"^:",22,"^2P","^2Q","^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/named?","^6","reagent/impl/template.cljs","^:",22,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",25,"^2Y","^2Q","^9",25,"^2Z",1,"^2P","^2Q","^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$parse-tag",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",287,"^8",7,"^9",287,"^:",16,"^2R",["^1=",["^2S",["^1=",[["~$hiccup-tag"]]]]]],"^O","~$reagent.impl.template/parse-tag","^6","reagent/impl/template.cljs","^:",16,"^2U",["^1=",[["^4V"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",287,"^2Y","^47","^9",287,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^4V"]]]]]],"~$kv-conv",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",62,"^8",7,"^9",62,"^:",14,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"^O","~$reagent.impl.template/kv-conv","^6","reagent/impl/template.cljs","^:",14,"^2U",["^1=",[["~$o","~$k","~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",62,"^9",62,"^2Z",3,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k","~$v"]]]]]],"~$key-from-vec",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",310,"^8",7,"^9",310,"^:",19,"^2R",["^1=",["^2S",["^1=",[["~$v"]]]]]],"^O","~$reagent.impl.template/key-from-vec","^6","reagent/impl/template.cljs","^:",19,"^2U",["^1=",[["~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",310,"^2Y",["^N",["^39","^3<"]],"^9",310,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$v"]]]]]],"~$js-val?",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",57,"^8",16,"^9",57,"^:",23,"^2P","^2Q","^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/js-val?","^6","reagent/impl/template.cljs","^:",23,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",57,"^2Y","^2Q","^9",57,"^2Z",1,"^2P","^2Q","^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$input-unmount",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",256,"^8",7,"^9",256,"^:",20,"^2R",["^1=",["^2S",["^1=",[["^3V"]]]]]],"^O","~$reagent.impl.template/input-unmount","^6","reagent/impl/template.cljs","^:",20,"^2U",["^1=",[["^3V"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",256,"^2Y","^39","^9",256,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^3V"]]]]]],"~$convert-custom-prop-value",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",94,"^8",7,"^9",94,"^:",32,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/convert-custom-prop-value","^6","reagent/impl/template.cljs","^:",32,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",94,"^2Y",["^N",[null,"^39","^12","^3M"]],"^9",94,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$reagent-input-class",["^ ","^O","~$reagent.impl.template/reagent-input-class","^6","reagent/impl/template.cljs","^7",264,"^8",1,"^9",264,"^:",25,"^5",["^ ","^6","reagent/impl/template.cljs","^7",264,"^8",6,"^9",264,"^:",25],"^2P","^3<"],"~$native-element",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",345,"^8",7,"^9",345,"^:",21,"^2R",["^1=",["^2S",["^1=",[["~$parsed","~$argv","~$first"]]]]]],"^O","~$reagent.impl.template/native-element","^6","reagent/impl/template.cljs","^:",21,"^2U",["^1=",[["^59","^5:","^5;"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",345,"^2Y","^39","^9",345,"^2Z",3,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^59","^5:","^5;"]]]]]],"~$reagent-input",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",278,"^8",7,"^9",278,"^:",20,"^2R",["^1=",["^2S",["^1=",[[]]]]]],"^O","~$reagent.impl.template/reagent-input","^6","reagent/impl/template.cljs","^:",20,"^2U",["^1=",[[]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",278,"^2Y","^3<","^9",278,"^2Z",0,"^2[",true,"^2R",["^1=",["^2S",["^1=",[[]]]]]],"~$fragment-element",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",322,"^8",7,"^9",322,"^:",23,"^2R",["^1=",["^2S",["^1=",[["^5:"]]]]]],"^O","~$reagent.impl.template/fragment-element","^6","reagent/impl/template.cljs","^:",23,"^2U",["^1=",[["^5:"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",322,"^2Y","^39","^9",322,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^5:"]]]]]],"~$vec-to-elem",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",373,"^8",7,"^9",373,"^:",18,"^2R",["^1=",["^2S",["^1=",[["~$v"]]]]]],"^O","~$reagent.impl.template/vec-to-elem","^6","reagent/impl/template.cljs","^:",18,"^2U",["^1=",[["~$v"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",373,"^2Y",["^N",[null,"^39","^3C"]],"^9",373,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$v"]]]]]],"~$cache-get",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",45,"^8",7,"^9",45,"^:",16,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k"]]]]]],"^O","~$reagent.impl.template/cache-get","^6","reagent/impl/template.cljs","^:",16,"^2U",["^1=",[["~$o","~$k"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",45,"^2Y",["^N",["^39","^3<"]],"^9",45,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$o","~$k"]]]]]],"~$input-handle-change",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",225,"^8",7,"^9",225,"^:",26,"^2R",["^1=",["^2S",["^1=",[["^3V","~$on-change","~$e"]]]]]],"^O","~$reagent.impl.template/input-handle-change","^6","reagent/impl/template.cljs","^:",26,"^2U",["^1=",[["^3V","^5F","~$e"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",225,"^2Y","^39","^9",225,"^2Z",3,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^3V","^5F","~$e"]]]]]],"~$make-element",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",472,"^8",7,"^9",472,"^:",19,"^2R",["^1=",["^2S",["^1=",[["^5:","^V","^3W","~$first-child"]]]]]],"^O","~$reagent.impl.template/make-element","^6","reagent/impl/template.cljs","^:",19,"^2U",["^1=",[["^5:","^V","^3W","^5I"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",472,"^9",472,"^2Z",4,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["^5:","^V","^3W","^5I"]]]]]],"~$input-spec",["^ ","^O","~$reagent.impl.template/input-spec","^6","reagent/impl/template.cljs","^7",268,"^8",1,"^9",268,"^:",16,"^5",["^ ","^6","reagent/impl/template.cljs","^7",268,"^8",6,"^9",268,"^:",16],"^2P","~$cljs.core/IMap"],"~$expand-seq-dev",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",425,"^8",7,"^9",425,"^:",21,"^2R",["^1=",["^2S",["^1=",[["~$s","~$o"]]]]]],"^O","~$reagent.impl.template/expand-seq-dev","^6","reagent/impl/template.cljs","^:",21,"^2U",["^1=",[["~$s","~$o"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",425,"^2Y","~$array","^9",425,"^2Z",2,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$s","~$o"]]]]]],"~$convert-prop-value",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",67,"^8",7,"^9",67,"^:",25,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/convert-prop-value","^6","reagent/impl/template.cljs","^:",25,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",67,"^2Y",["^N",[null,"^39","^12","^3M"]],"^9",67,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$cached-prop-name",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",49,"^8",7,"^9",49,"^:",23,"^2R",["^1=",["^2S",["^1=",[["~$k"]]]]]],"^O","~$reagent.impl.template/cached-prop-name","^6","reagent/impl/template.cljs","^:",23,"^2U",["^1=",[["~$k"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",49,"^2Y",["^N",[null,"^39","^3<"]],"^9",49,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$k"]]]]]],"~$cached-custom-prop-name",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",81,"^8",7,"^9",81,"^:",30,"^2R",["^1=",["^2S",["^1=",[["~$k"]]]]]],"^O","~$reagent.impl.template/cached-custom-prop-name","^6","reagent/impl/template.cljs","^:",30,"^2U",["^1=",[["~$k"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",81,"^2Y",["^N",[null,"^39","^3<"]],"^9",81,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$k"]]]]]],"~$these-inputs-have-selection-api",["^ ","^O","~$reagent.impl.template/these-inputs-have-selection-api","^6","reagent/impl/template.cljs","^7",157,"^8",1,"^9",157,"^:",37,"^5",["^ ","^6","reagent/impl/template.cljs","^7",157,"^8",6,"^9",157,"^:",37],"^2P","~$cljs.core/ISet"],"~$expand-seq",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",419,"^8",7,"^9",419,"^:",17,"^2R",["^1=",["^2S",["^1=",[["~$s"]]]]]],"^O","~$reagent.impl.template/expand-seq","^6","reagent/impl/template.cljs","^:",17,"^2U",["^1=",[["~$s"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",419,"^2Y","^5P","^9",419,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$s"]]]]]],"~$expand-seq-check",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",435,"^8",7,"^9",435,"^:",23,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/expand-seq-check","^6","reagent/impl/template.cljs","^:",23,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",435,"^2Y","^39","^9",435,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$find-dom-node",["^ ","^O","~$reagent.impl.template/find-dom-node","^6","reagent/impl/template.cljs","^7",152,"^8",1,"^9",152,"^:",23,"^5",["^ ","^6","reagent/impl/template.cljs","^7",152,"^8",10,"^9",152,"^:",23],"^2P","^3<"],"~$cached-parse",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",340,"^8",7,"^9",340,"^:",19,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/cached-parse","^6","reagent/impl/template.cljs","^:",19,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",340,"^2Y",["^N",["^39","^3<"]],"^9",340,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"~$try-get-key",["^ ","^2O",null,"^5",["^ ","^6","reagent/impl/template.cljs","^7",300,"^8",7,"^9",300,"^:",18,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]],"^O","~$reagent.impl.template/try-get-key","^6","reagent/impl/template.cljs","^:",18,"^2U",["^1=",[["~$x"]]],"^2V",null,"^2W",["^1=",[null,null]],"^8",1,"^2X",false,"^7",300,"^9",300,"^2Z",1,"^2[",true,"^2R",["^1=",["^2S",["^1=",[["~$x"]]]]]]],"^1;",["^ ","^C","^C","^F","^F","^Y","^Y","^X","^X","^11","^X"],"~:cljs.analyzer/constants",["^ ","^16",["^N",["~:key","~:else","~:component-did-update","~:<>","~:reagent-render","~:on-write","~:id","~:class","~:component-will-unmount","~:display-name"]],"~:order",["^6:","^6?","^6@","^6>","^6B","^6;","^6A","^6=","^69","^6<"]],"^1B",["^ ","^17",["^N",[]]],"^1C",["^ "],"^1D",["^Z","^Y","^=","^13","^15","^U","^W","^[","^X","^C","^F"]],"^R","^P","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1R",[["^6F","~:static-fns"],true,["^6F","~:elide-asserts"],false,["^6F","~:optimize-constants"],null,["^6F","~:external-config"],null,["^6F","~:tooling-config"],null,["^6F","~:emit-constants"],null,["^6F","~:infer-externs"],true,["^6F","^1K"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6F","~:fn-invoke-direct"],null,["^6F","~:source-map"],"/dev/null"]]]